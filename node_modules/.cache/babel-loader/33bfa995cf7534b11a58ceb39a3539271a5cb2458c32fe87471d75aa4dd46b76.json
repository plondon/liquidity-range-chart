{"ast":null,"code":"var _jsxFileName = \"/Users/phil.london/Projects/tradingview-chart-mvp/src/D3Chart.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState, useMemo } from 'react';\nimport * as d3 from 'd3';\nimport PriceRange from './PriceRange';\nimport PriceDragPoints from './PriceDragPoints';\n\n// Cache for price data lookups\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst priceDataCache = new Map();\nfunction findClosestElementBinarySearch(data, target) {\n  var _data$right, _data$left;\n  let left = 0;\n  let right = data.length - 1;\n  if (!target) {\n    return null;\n  }\n  if (priceDataCache.has(target.toString())) {\n    return priceDataCache.get(target.toString());\n  }\n  while (left <= right) {\n    const mid = Math.floor((left + right) / 2);\n    if (data[mid].price0 === target) {\n      priceDataCache.set(target.toString(), data[mid]);\n      return data[mid];\n    } else if (data[mid].price0 < target) {\n      left = mid + 1;\n    } else {\n      right = mid - 1;\n    }\n  }\n\n  // After binary search, left and right are the closest bounds\n  const closest = (_data$right = data[right]) !== null && _data$right !== void 0 ? _data$right : {\n    price0: Infinity\n  }; // Handle bounds\n  const nextClosest = (_data$left = data[left]) !== null && _data$left !== void 0 ? _data$left : {\n    price0: Infinity\n  };\n\n  // Return the element with the closest `price0`\n  const closestElement = Math.abs(closest.price0 - target) <= Math.abs(nextClosest.price0 - target) ? closest : nextClosest;\n  priceDataCache.set(target.toString(), closestElement);\n  return closestElement;\n}\nfunction scaleToInteger(a, precision = 18) {\n  const scaleFactor = Math.pow(10, precision);\n  return Math.round(a * scaleFactor);\n}\nconst D3Chart = ({\n  data,\n  liquidityData\n}) => {\n  _s();\n  const svgRef = useRef();\n  const containerRef = useRef();\n  const [initialViewSet, setInitialViewSet] = useState(false);\n  const [dragInProgress, setDragInProgress] = useState(false);\n  const [dimensions, setDimensions] = useState(() => {\n    // Initialize with viewport-based dimensions\n    const isMobile = window.innerWidth <= 768;\n    return {\n      width: Math.max(300, Math.min(window.innerWidth - 20, 900)),\n      height: isMobile ? Math.min(300, window.innerHeight * 0.4) : 400\n    };\n  });\n\n  // Handle resize for responsiveness\n  useEffect(() => {\n    const handleResize = () => {\n      // Always calculate based on window size for immediate responsiveness\n      const isMobile = window.innerWidth <= 768;\n      const height = isMobile ? Math.min(300, window.innerHeight * 0.4) : 400;\n      const width = Math.max(300, Math.min(window.innerWidth - 20, isMobile ? window.innerWidth - 20 : 900));\n      setDimensions(prev => {\n        // Only update if dimensions actually changed to avoid unnecessary re-renders\n        if (prev.width !== width || prev.height !== height) {\n          return {\n            width,\n            height\n          };\n        }\n        return prev;\n      });\n    };\n\n    // Use a timeout to ensure DOM is ready and multiple calls for better reliability\n    const timeoutId = setTimeout(handleResize, 100);\n    const intervalId = setInterval(handleResize, 500); // Check periodically initially\n\n    window.addEventListener('resize', handleResize);\n    window.addEventListener('orientationchange', () => {\n      setTimeout(handleResize, 300); // Handle mobile orientation changes\n    });\n\n    // Stop the interval after a few seconds\n    setTimeout(() => clearInterval(intervalId), 3000);\n    return () => {\n      clearTimeout(timeoutId);\n      clearInterval(intervalId);\n      window.removeEventListener('resize', handleResize);\n    };\n  }, []);\n\n  // Default state object\n  const defaultState = useRef({\n    zoomLevel: 1,\n    panY: 0,\n    minPrice: null,\n    maxPrice: null\n  });\n\n  // Main state object\n  const [chartState, setChartState] = useState({\n    zoomLevel: 1,\n    panY: 0,\n    minPrice: null,\n    maxPrice: null\n  });\n\n  // Destructure for easier access\n  const {\n    zoomLevel,\n    panY,\n    minPrice,\n    maxPrice\n  } = chartState;\n\n  // Calculate current price from the last entry\n  const current = useMemo(() => {\n    var _data;\n    return data && data.length > 0 ? (_data = data[data.length - 1]) === null || _data === void 0 ? void 0 : _data.value : null;\n  }, [data]);\n\n  // Calculate currentTick based on current price\n  const currentTick = useMemo(() => {\n    var _findClosestElementBi;\n    if (!current || !liquidityData) return null;\n    return (_findClosestElementBi = findClosestElementBinarySearch(liquidityData, current)) === null || _findClosestElementBi === void 0 ? void 0 : _findClosestElementBi.tick;\n  }, [current, liquidityData]);\n\n  // Brush extent as [min, max] array\n  const brushExtent = useMemo(() => {\n    if (minPrice !== null && maxPrice !== null) {\n      return [minPrice, maxPrice];\n    }\n    return null;\n  }, [minPrice, maxPrice]);\n  const setBrushExtent = extent => {\n    if (extent && extent.length === 2) {\n      setChartState(prev => ({\n        ...prev,\n        minPrice: extent[0],\n        maxPrice: extent[1]\n      }));\n    } else {\n      setChartState(prev => ({\n        ...prev,\n        minPrice: null,\n        maxPrice: null\n      }));\n    }\n  };\n\n  // Helper functions for updating individual state properties\n  const setMinPrice = price => setChartState(prev => ({\n    ...prev,\n    minPrice: price\n  }));\n  const setMaxPrice = price => setChartState(prev => ({\n    ...prev,\n    maxPrice: price\n  }));\n  const setZoomLevel = zoom => setChartState(prev => ({\n    ...prev,\n    zoomLevel: zoom\n  }));\n  const setPanY = pan => setChartState(prev => ({\n    ...prev,\n    panY: pan\n  }));\n\n  // Calculate yScale outside useEffect so it's available for Brush component\n  const yScale = useMemo(() => {\n    if (!data || !liquidityData) return null;\n    const allPrices = [...data.map(d => d.value), ...liquidityData.map(d => d.price0)];\n    const priceExtent = d3.extent(allPrices);\n    const priceRange = priceExtent[1] - priceExtent[0];\n    const zoomedRange = priceRange / zoomLevel;\n    const centerPrice = priceExtent[0] + priceRange * 0.5 + panY * priceRange;\n    return d3.scaleLinear().domain([centerPrice - zoomedRange / 2, centerPrice + zoomedRange / 2]).range([dimensions.height - 20 - 50, 0]); // [height, 0] for proper D3 coordinate system\n  }, [data, liquidityData, zoomLevel, panY, dimensions]);\n  useEffect(() => {\n    if (!data || !liquidityData || !yScale) return;\n    const svg = d3.select(svgRef.current);\n    svg.selectAll(\"g\").remove(); // Only remove D3-created elements, not React elements\n\n    const isMobile = window.innerWidth <= 768;\n    const margin = {\n      top: 20,\n      right: isMobile ? 120 : 180,\n      // Reduce right margin on mobile\n      bottom: 50,\n      left: isMobile ? 60 : 80 // Reduce left margin on mobile\n    };\n    const width = dimensions.width - margin.left - margin.right;\n    const height = dimensions.height - margin.top - margin.bottom;\n    const g = svg.append(\"g\").attr(\"transform\", `translate(${margin.left},${margin.top})`);\n\n    // Convert timestamps to dates for price data\n    const priceData = data.map(d => ({\n      date: new Date(d.time * 1000),\n      value: d.value\n    }));\n\n    // Unified price scale encompassing both price data and liquidity data\n    const allPrices = [...priceData.map(d => d.value), ...liquidityData.map(d => d.price0)];\n    const priceExtent = d3.extent(allPrices);\n\n    // Scales for price line chart\n    const xScale = d3.scaleTime().domain(d3.extent(priceData, d => d.date)).range([-margin.left, width - 40]); // Extend left but stop before liquidity section\n\n    // Line generator for price\n    const line = d3.line().x(d => xScale(d.date)).y(d => yScale(d.value)).curve(d3.curveMonotoneX);\n\n    // Draw price line with conditional coloring\n    if (minPrice !== null && maxPrice !== null) {\n      // Draw segments with different colors based on price range\n      for (let i = 0; i < priceData.length - 1; i++) {\n        const currentPoint = priceData[i];\n        const nextPoint = priceData[i + 1];\n\n        // Check if current point is within range\n        const isInRange = currentPoint.value >= minPrice && currentPoint.value <= maxPrice;\n        const color = isInRange ? \"#d63384\" : \"#888888\"; // Dark pink or grey\n\n        // Draw line segment between current and next point\n        g.append(\"path\").datum([currentPoint, nextPoint]).attr(\"fill\", \"none\").attr(\"stroke\", color).attr(\"stroke-width\", 2).attr(\"d\", line).attr(\"class\", \"price-segment\");\n      }\n    } else {\n      // Draw single blue line when no range is selected\n      g.append(\"path\").datum(priceData).attr(\"fill\", \"none\").attr(\"stroke\", \"#2196F3\").attr(\"stroke-width\", 2).attr(\"d\", line).attr(\"class\", \"price-line\");\n    }\n\n    // Remove X and left Y axes completely\n\n    // Right side liquidity chart - inspired by Uniswap's approach\n    const liquidityWidth = margin.right; // Use full margin width\n\n    // Use the same unified y scale for liquidity positioning\n    const liquidityYScale = yScale;\n\n    // Calculate current visible price range for filtering liquidity data\n    const currentPriceRange = priceExtent[1] - priceExtent[0];\n    const currentZoomedRange = currentPriceRange / zoomLevel;\n    const currentCenterPrice = priceExtent[0] + currentPriceRange * 0.5 + panY * currentPriceRange;\n    const visibleMinPrice = currentCenterPrice - currentZoomedRange / 2;\n    const visibleMaxPrice = currentCenterPrice + currentZoomedRange / 2;\n\n    // Filter liquidity data to only entries within visible price range\n    const visibleLiquidityData = liquidityData.filter(d => d.price0 >= visibleMinPrice && d.price0 <= visibleMaxPrice);\n\n    // X scale for liquidity amounts - scale based only on visible entries\n    const maxVisibleLiquidity = visibleLiquidityData.length > 0 ? d3.max(visibleLiquidityData, d => d.activeLiquidity) : d3.max(liquidityData, d => d.activeLiquidity); // Fallback if no visible data\n\n    const liquidityXScale = d3.scaleLinear().domain([0, maxVisibleLiquidity]).range([0, liquidityWidth]); // Back to liquidity section width\n\n    // Draw very thin grey horizontal liquidity bars using data join for better performance\n    const bars = g.selectAll(\".liquidity-bar\").data(liquidityData, d => d.price0); // Use price as key for consistent updates\n\n    // Remove bars that are no longer needed\n    bars.exit().transition().duration(150).style(\"opacity\", 0).remove();\n\n    // Add new bars\n    const enterBars = bars.enter().append(\"rect\").attr(\"class\", \"liquidity-bar\").attr(\"height\", 1).attr(\"opacity\", 0.7).attr(\"x\", d => width + 10 + liquidityWidth - liquidityXScale(d.activeLiquidity) - 40).attr(\"y\", d => liquidityYScale(d.price0) - 0.5).attr(\"width\", d => liquidityXScale(d.activeLiquidity));\n\n    // Update existing bars with smooth transitions and conditional coloring\n    bars.merge(enterBars).transition().duration(100).attr(\"x\", d => width + 10 + liquidityWidth - liquidityXScale(d.activeLiquidity) - 40).attr(\"y\", d => liquidityYScale(d.price0) - 0.5).attr(\"width\", d => liquidityXScale(d.activeLiquidity)).attr(\"fill\", d => {\n      // Check if bar is within the price range - ensure proper number comparison\n      const price = parseFloat(d.price0);\n      const min = parseFloat(minPrice);\n      const max = parseFloat(maxPrice);\n      if (minPrice !== null && maxPrice !== null && price >= min && price <= max) {\n        return \"#d63384\"; // Dark pink for bars within range\n      }\n      return \"#888888\"; // Default grey\n    });\n\n    // No price labels needed\n\n    // Draw price range visualization directly in the main chart\n    if (minPrice !== null && maxPrice !== null) {\n      // Remove existing range elements\n      g.selectAll(\".price-range-element\").remove();\n\n      // Check if lines are too close together (less than 5px apart)\n      const minY = yScale(minPrice);\n      const maxY = yScale(maxPrice);\n      const linesAreTooClose = Math.abs(minY - maxY) < 5;\n\n      // Draw transparent pink background between min and max - extend to cover full chart area\n      g.append('rect').attr('class', 'price-range-element price-range-bg').attr('x', -margin.left) // Extend left to cover the margin area\n      .attr('y', yScale(maxPrice)).attr('width', dimensions.width) // Cover the entire SVG width\n      .attr('height', yScale(minPrice) - yScale(maxPrice)).attr('fill', '#ff69b4').attr('fill-opacity', 0.15).attr('stroke', 'none') // Remove any border from background\n      .attr('cursor', 'move').call(d3.drag().on('start', function (event) {\n        setDragInProgress(true);\n        // Store the initial click offset relative to the range center\n        const currentRangeCenterY = (yScale(maxPrice) + yScale(minPrice)) / 2;\n        this._dragOffsetY = event.y - currentRangeCenterY;\n      }).on('drag', function (event) {\n        // Apply the stored offset to maintain consistent drag feel\n        const adjustedY = event.y - this._dragOffsetY;\n        const newCenterY = Math.max(0, Math.min(height, adjustedY));\n        const draggedPrice = yScale.invert(newCenterY);\n        const rangeSize = maxPrice - minPrice;\n\n        // Calculate new min/max based on dragged center position\n        const newMaxPrice = draggedPrice + rangeSize / 2;\n        const newMinPrice = draggedPrice - rangeSize / 2;\n\n        // Get data bounds to prevent dragging outside chart\n        const allPrices = [...data.map(d => d.value), ...liquidityData.map(d => d.price0)];\n        const dataMin = Math.min(...allPrices);\n        const dataMax = Math.max(...allPrices);\n\n        // Only update if range stays within data bounds\n        if (newMinPrice >= dataMin && newMaxPrice <= dataMax) {\n          // Update background position\n          const newMaxY = yScale(newMaxPrice);\n          const newMinY = yScale(newMinPrice);\n          d3.select(this).attr('y', newMaxY).attr('height', newMinY - newMaxY);\n\n          // Update min line\n          g.select('.min-line').attr('y1', newMinY).attr('y2', newMinY);\n\n          // Update max line\n          g.select('.max-line').attr('y1', newMaxY).attr('y2', newMaxY);\n\n          // Update labels\n          g.select('.min-label').attr('x', -68).attr('y', newMinY - 5).text(`Min: ${newMinPrice.toFixed(0)}`);\n          g.select('.max-label').attr('x', -68).attr('y', newMaxY + 15).text(`Max: ${newMaxPrice.toFixed(0)}`);\n\n          // Update liquidity bar colors\n          g.selectAll('.liquidity-bar').attr('fill', d => {\n            const price = parseFloat(d.price0);\n            if (price >= newMinPrice && price <= newMaxPrice) {\n              return \"#d63384\";\n            }\n            return \"#888888\";\n          });\n\n          // Update price line segment colors\n          g.selectAll('.price-segment').attr('stroke', function () {\n            const datum = d3.select(this).datum();\n            if (datum && datum.length > 0) {\n              const value = datum[0].value;\n              return value >= newMinPrice && value <= newMaxPrice ? \"#d63384\" : \"#888888\";\n            }\n            return \"#888888\";\n          });\n\n          // Update minimap controls to reflect new positions\n          g.select('.minimap-range').attr('y', minimapYScale(newMaxPrice)).attr('height', minimapYScale(newMinPrice) - minimapYScale(newMaxPrice));\n          g.select('.max-handle').attr('cy', minimapYScale(newMaxPrice));\n          g.select('.min-handle').attr('cy', minimapYScale(newMinPrice));\n          g.select('.center-handle').attr('cy', (minimapYScale(newMaxPrice) + minimapYScale(newMinPrice)) / 2);\n        }\n      }).on('end', function (event) {\n        // Apply the same offset calculation for consistency\n        const adjustedY = event.y - this._dragOffsetY;\n        const newCenterY = Math.max(margin.top, Math.min(dimensions.height - margin.bottom, adjustedY));\n        const draggedPrice = yScale.invert(newCenterY);\n        const rangeSize = maxPrice - minPrice;\n\n        // Calculate new min/max based on dragged center position\n        const newMaxPrice = draggedPrice + rangeSize / 2;\n        const newMinPrice = draggedPrice - rangeSize / 2;\n\n        // Get data bounds\n        const allPrices = [...data.map(d => d.value), ...liquidityData.map(d => d.price0)];\n        const dataMin = Math.min(...allPrices);\n        const dataMax = Math.max(...allPrices);\n\n        // Only update state if range stays within data bounds\n        if (newMinPrice >= dataMin && newMaxPrice <= dataMax) {\n          setMinPrice(newMinPrice);\n          setMaxPrice(newMaxPrice);\n        }\n        setDragInProgress(false);\n      }));\n\n      // Draw min price line (solid) with drag behavior\n      g.append('line').attr('class', 'price-range-element min-line').attr('x1', -margin.left) // Start from left margin\n      .attr('x2', dimensions.width - margin.left) // Extend to right edge\n      .attr('y1', yScale(minPrice)).attr('y2', yScale(minPrice)).attr('stroke', '#131313').attr('stroke-width', 2).attr('opacity', 0.08).attr('cursor', 'ns-resize').call(d3.drag().on('start', function () {\n        setDragInProgress(true);\n      }).on('drag', function (event) {\n        const newY = Math.max(-margin.top, Math.min(height + margin.bottom, event.y));\n        const newPrice = yScale.invert(newY);\n\n        // Update visual position immediately\n        d3.select(this).attr('y1', newY).attr('y2', newY);\n\n        // Determine which line represents min and max during drag\n        const currentMaxY = yScale(maxPrice);\n        let draggedMinPrice = newPrice;\n        let draggedMaxPrice = maxPrice;\n\n        // Handle visual swapping if lines cross\n        if (newY < currentMaxY) {\n          // Min line dragged above max line - swap visually\n          draggedMinPrice = maxPrice;\n          draggedMaxPrice = newPrice;\n\n          // Update max line color to min color and vice versa\n          g.select('.max-line').attr('stroke', '#131313'); // Same color for both\n          d3.select(this).attr('stroke', '#131313'); // Same color for both\n        } else {\n          // Lines in normal order - restore original colors\n          g.select('.max-line').attr('stroke', '#131313'); // Same color for both\n          d3.select(this).attr('stroke', '#131313'); // Same color for both\n        }\n\n        // Update background\n        g.select('.price-range-bg').attr('y', yScale(draggedMaxPrice)).attr('height', yScale(draggedMinPrice) - yScale(draggedMaxPrice));\n\n        // Update labels\n        g.select('.min-label').attr('x', -68).attr('y', yScale(draggedMinPrice) - 5).text(`Min: ${draggedMinPrice.toFixed(0)}`);\n        g.select('.max-label').attr('x', -68).attr('y', yScale(draggedMaxPrice) + 15).text(`Max: ${draggedMaxPrice.toFixed(0)}`);\n\n        // Update liquidity bar colors\n        g.selectAll('.liquidity-bar').attr('fill', d => {\n          const price = parseFloat(d.price0);\n          if (price >= draggedMinPrice && price <= draggedMaxPrice) {\n            return \"#d63384\";\n          }\n          return \"#888888\";\n        });\n\n        // Update price line segment colors\n        g.selectAll('.price-segment').attr('stroke', function () {\n          const datum = d3.select(this).datum();\n          if (datum && datum.length > 0) {\n            const value = datum[0].value;\n            return value >= draggedMinPrice && value <= draggedMaxPrice ? \"#d63384\" : \"#888888\";\n          }\n          return \"#888888\";\n        });\n\n        // Update minimap controls for min line drag\n        g.select('.minimap-range').attr('y', minimapYScale(draggedMaxPrice)).attr('height', minimapYScale(draggedMinPrice) - minimapYScale(draggedMaxPrice));\n        g.select('.max-handle').attr('cy', minimapYScale(draggedMaxPrice));\n        g.select('.min-handle').attr('cy', minimapYScale(draggedMinPrice));\n        g.select('.center-handle').attr('cy', (minimapYScale(draggedMaxPrice) + minimapYScale(draggedMinPrice)) / 2);\n      }).on('end', function (event) {\n        const newY = Math.max(-margin.top, Math.min(height + margin.bottom, event.y));\n        const newPrice = yScale.invert(newY);\n\n        // Handle final state update with proper min/max ordering\n        if (newPrice > maxPrice) {\n          // Min dragged above max - swap them in state\n          setMinPrice(maxPrice);\n          setMaxPrice(newPrice);\n        } else {\n          // Normal case - just update min\n          setMinPrice(newPrice);\n        }\n        setDragInProgress(false);\n      }));\n\n      // Draw max price line (solid) with drag behavior\n      g.append('line').attr('class', 'price-range-element max-line').attr('x1', -margin.left) // Start from left margin\n      .attr('x2', dimensions.width - margin.left) // Extend to right edge\n      .attr('y1', yScale(maxPrice)).attr('y2', yScale(maxPrice)).attr('stroke', '#131313').attr('stroke-width', 2).attr('opacity', 0.08).attr('cursor', 'ns-resize').call(d3.drag().on('start', function () {\n        setDragInProgress(true);\n      }).on('drag', function (event) {\n        const newY = Math.max(-margin.top, Math.min(height + margin.bottom, event.y));\n        const newPrice = yScale.invert(newY);\n\n        // Update visual position immediately\n        d3.select(this).attr('y1', newY).attr('y2', newY);\n\n        // Determine which line represents min and max during drag\n        const currentMinY = yScale(minPrice);\n        let draggedMinPrice = minPrice;\n        let draggedMaxPrice = newPrice;\n\n        // Handle visual swapping if lines cross\n        if (newY > currentMinY) {\n          // Max line dragged below min line - swap visually\n          draggedMinPrice = newPrice;\n          draggedMaxPrice = minPrice;\n\n          // Update min line color to max color and vice versa\n          g.select('.min-line').attr('stroke', '#131313'); // Same color for both\n          d3.select(this).attr('stroke', '#131313'); // Same color for both\n        } else {\n          // Lines in normal order - restore original colors\n          g.select('.min-line').attr('stroke', '#131313'); // Same color for both\n          d3.select(this).attr('stroke', '#131313'); // Same color for both\n        }\n\n        // Update background\n        g.select('.price-range-bg').attr('y', yScale(draggedMaxPrice)).attr('height', yScale(draggedMinPrice) - yScale(draggedMaxPrice));\n\n        // Update labels\n        g.select('.min-label').attr('x', -68).attr('y', yScale(draggedMinPrice) - 5).text(`Min: ${draggedMinPrice.toFixed(0)}`);\n        g.select('.max-label').attr('x', -68).attr('y', yScale(draggedMaxPrice) + 15).text(`Max: ${draggedMaxPrice.toFixed(0)}`);\n\n        // Update liquidity bar colors\n        g.selectAll('.liquidity-bar').attr('fill', d => {\n          const price = parseFloat(d.price0);\n          if (price >= draggedMinPrice && price <= draggedMaxPrice) {\n            return \"#d63384\";\n          }\n          return \"#888888\";\n        });\n\n        // Update price line segment colors\n        g.selectAll('.price-segment').attr('stroke', function () {\n          const datum = d3.select(this).datum();\n          if (datum && datum.length > 0) {\n            const value = datum[0].value;\n            return value >= draggedMinPrice && value <= draggedMaxPrice ? \"#d63384\" : \"#888888\";\n          }\n          return \"#888888\";\n        });\n\n        // Update minimap controls for max line drag\n        g.select('.minimap-range').attr('y', minimapYScale(draggedMaxPrice)).attr('height', minimapYScale(draggedMinPrice) - minimapYScale(draggedMaxPrice));\n        g.select('.max-handle').attr('cy', minimapYScale(draggedMaxPrice));\n        g.select('.min-handle').attr('cy', minimapYScale(draggedMinPrice));\n        g.select('.center-handle').attr('cy', (minimapYScale(draggedMaxPrice) + minimapYScale(draggedMinPrice)) / 2);\n      }).on('end', function (event) {\n        const newY = Math.max(-margin.top, Math.min(height + margin.bottom, event.y));\n        const newPrice = yScale.invert(newY);\n\n        // Handle final state update with proper min/max ordering\n        if (newPrice < minPrice) {\n          // Max dragged below min - swap them in state\n          setMaxPrice(minPrice);\n          setMinPrice(newPrice);\n        } else {\n          // Normal case - just update max\n          setMaxPrice(newPrice);\n        }\n        setDragInProgress(false);\n      }));\n\n      // Add min price label\n      g.append('text').attr('class', 'price-range-element min-label').attr('x', -margin.left + 12) // 12px from left border\n      .attr('y', yScale(minPrice) - 5).attr('font-size', '10px').attr('fill', '#131313').attr('font-weight', 'bold').text(`Min: ${minPrice.toFixed(0)}`);\n\n      // Add max price label\n      g.append('text').attr('class', 'price-range-element max-label').attr('x', -margin.left + 12) // 12px from left border\n      .attr('y', yScale(maxPrice) + 15).attr('font-size', '10px').attr('fill', '#131313').attr('font-weight', 'bold').text(`Max: ${maxPrice.toFixed(0)}`);\n    }\n\n    // Draw current price line (dotted) if current price exists\n    if (current !== null) {\n      // Remove existing current price line\n      g.selectAll('.current-price-line').remove();\n      g.selectAll('.current-price-label').remove();\n\n      // Draw dotted line across the entire chart for current price\n      g.append('line').attr('class', 'current-price-line').attr('x1', -margin.left) // Start from left margin\n      .attr('x2', dimensions.width - margin.left) // Extend to right edge\n      .attr('y1', yScale(current)).attr('y2', yScale(current)).attr('stroke', '#666666') // Grey color\n      .attr('stroke-width', 2).attr('stroke-dasharray', '5,5') // Dotted line pattern\n      .attr('opacity', 0.8);\n\n      // Add current price label on the left like min/max\n      g.append('text').attr('class', 'current-price-label').attr('x', -margin.left + 12) // 12px from left border\n      .attr('y', yScale(current) - 5).attr('font-size', '10px').attr('fill', '#666666') // Grey color\n      .attr('font-weight', 'bold').text(`Current: ${current.toFixed(0)}`);\n    }\n\n    // Create minimap controls on the right side\n    const minimapWidth = 40;\n    const minimapX = width + 160; // Position near the right border\n\n    // Get full data range for minimap scale\n    const minimapPrices = [...data.map(d => d.value), ...liquidityData.map(d => d.price0)];\n    const dataMin = Math.min(...minimapPrices);\n    const dataMax = Math.max(...minimapPrices);\n\n    // Create scale for full data range (for minimap) - full container height\n    const minimapYScale = d3.scaleLinear().domain([dataMin, dataMax]).range([dimensions.height - margin.bottom, margin.top]);\n\n    // Remove liquidity bars from minimap - not needed\n\n    // Draw minimap background track (full container height)\n    g.append('rect').attr('class', 'minimap-track').attr('x', minimapX).attr('y', -margin.top).attr('width', 8).attr('height', dimensions.height) // Full container height\n    .attr('fill', '#333333').attr('rx', 4);\n\n    // Calculate current viewport bounds based on zoom and pan using full data range\n    const fullDataRange = dataMax - dataMin;\n    const zoomedRange = fullDataRange / zoomLevel;\n    const currentCenter = dataMin + fullDataRange * 0.5 + panY * fullDataRange;\n    const viewportMinPrice = currentCenter - zoomedRange / 2;\n    const viewportMaxPrice = currentCenter + zoomedRange / 2;\n\n    // Draw viewport indicator (shows current visible area)\n    const viewportHeight = minimapYScale(viewportMinPrice) - minimapYScale(viewportMaxPrice);\n    g.append('rect').attr('class', 'minimap-viewport').attr('x', minimapX - 2).attr('y', minimapYScale(viewportMaxPrice)).attr('width', 12).attr('height', viewportHeight).attr('fill', '#ffffff').attr('fill-opacity', 0.2).attr('stroke', '#ffffff').attr('stroke-width', 1).attr('stroke-opacity', 0.4).attr('rx', 2);\n\n    // Draw current range indicator (pink bar) with drag functionality\n    const currentRangeHeight = minimapYScale(minPrice) - minimapYScale(maxPrice);\n    const minimapRange = g.append('rect').attr('class', 'minimap-range').attr('x', minimapX).attr('y', minimapYScale(maxPrice)).attr('width', 8).attr('height', currentRangeHeight).attr('fill', '#ff69b4').attr('rx', 4).attr('cursor', 'move');\n\n    // Add drag behavior to the minimap range bar\n    minimapRange.call(d3.drag().on('start', function () {\n      setDragInProgress(true);\n    }).on('drag', function (event) {\n      const newCenterY = Math.max(margin.top, Math.min(dimensions.height - margin.bottom, event.y));\n      const newCenterPrice = minimapYScale.invert(newCenterY);\n      const rangeSize = maxPrice - minPrice;\n\n      // Calculate new min/max based on center position\n      let newMaxPrice = newCenterPrice + rangeSize / 2;\n      let newMinPrice = newCenterPrice - rangeSize / 2;\n\n      // Keep within data bounds\n      if (newMaxPrice > dataMax) {\n        newMaxPrice = dataMax;\n        newMinPrice = dataMax - rangeSize;\n      }\n      if (newMinPrice < dataMin) {\n        newMinPrice = dataMin;\n        newMaxPrice = dataMin + rangeSize;\n      }\n\n      // Update visual positions of handles and range bar\n      topHandle.attr('cy', minimapYScale(newMaxPrice));\n      bottomHandle.attr('cy', minimapYScale(newMinPrice));\n      d3.select(this).attr('y', minimapYScale(newMaxPrice)).attr('height', minimapYScale(newMinPrice) - minimapYScale(newMaxPrice));\n\n      // Update center handle position\n      const newCenterHandleY = (minimapYScale(newMaxPrice) + minimapYScale(newMinPrice)) / 2;\n      centerHandle.attr('cy', newCenterHandleY);\n\n      // Calculate pan position based on where the range is positioned\n      const fullDataRange = dataMax - dataMin;\n      const rangeCenterInData = (newMaxPrice + newMinPrice) / 2;\n      const dataCenterPosition = (rangeCenterInData - dataMin) / fullDataRange - 0.5;\n\n      // Update chart state to follow the minimap range\n      setChartState(prev => ({\n        ...prev,\n        minPrice: newMinPrice,\n        maxPrice: newMaxPrice,\n        panY: dataCenterPosition\n      }));\n    }).on('end', function () {\n      setDragInProgress(false);\n    }));\n\n    // Draw drag handles\n    const handleRadius = 8;\n\n    // Top handle (max price)\n    const topHandle = g.append('circle').attr('class', 'minimap-handle max-handle').attr('cx', minimapX + 4).attr('cy', minimapYScale(maxPrice)).attr('r', handleRadius).attr('fill', '#ffffff').attr('stroke', '#ff69b4').attr('stroke-width', 3).attr('cursor', 'ns-resize');\n\n    // Bottom handle (min price) \n    const bottomHandle = g.append('circle').attr('class', 'minimap-handle min-handle').attr('cx', minimapX + 4).attr('cy', minimapYScale(minPrice)).attr('r', handleRadius).attr('fill', '#ffffff').attr('stroke', '#ff69b4').attr('stroke-width', 3).attr('cursor', 'ns-resize');\n\n    // Center handle (for dragging entire range)\n    const centerY = (minimapYScale(maxPrice) + minimapYScale(minPrice)) / 2;\n    const centerHandle = g.append('circle').attr('class', 'minimap-handle center-handle').attr('cx', minimapX + 4).attr('cy', centerY).attr('r', 6).attr('fill', '#ff69b4').attr('cursor', 'move');\n\n    // Add drag behavior to top handle (max price)\n    topHandle.call(d3.drag().on('start', function () {\n      setDragInProgress(true);\n    }).on('drag', function (event) {\n      const newY = Math.max(margin.top, Math.min(dimensions.height - margin.bottom, event.y));\n      const newMaxPrice = minimapYScale.invert(newY);\n\n      // Ensure max stays above min\n      const constrainedMaxPrice = Math.max(newMaxPrice, minPrice);\n\n      // Update visual position\n      d3.select(this).attr('cy', minimapYScale(constrainedMaxPrice));\n\n      // Update range bar\n      g.select('.minimap-range').attr('y', minimapYScale(constrainedMaxPrice)).attr('height', minimapYScale(minPrice) - minimapYScale(constrainedMaxPrice));\n\n      // Update center handle position\n      const newCenterY = (minimapYScale(constrainedMaxPrice) + minimapYScale(minPrice)) / 2;\n      centerHandle.attr('cy', newCenterY);\n\n      // Update main chart price range elements\n      g.select('.price-range-bg').attr('y', yScale(constrainedMaxPrice)).attr('height', yScale(minPrice) - yScale(constrainedMaxPrice));\n      g.select('.max-line').attr('y1', yScale(constrainedMaxPrice)).attr('y2', yScale(constrainedMaxPrice));\n      g.select('.max-label').attr('y', yScale(constrainedMaxPrice) + 15).text(`Max: ${constrainedMaxPrice.toFixed(0)}`);\n    }).on('end', function (event) {\n      const newY = Math.max(margin.top, Math.min(dimensions.height - margin.bottom, event.y));\n      let newMaxPrice = minimapYScale.invert(newY);\n\n      // If dragged to top, set to data maximum\n      if (newY <= margin.top + 10) {\n        newMaxPrice = dataMax;\n      }\n\n      // Ensure max stays above min\n      const constrainedMaxPrice = Math.max(newMaxPrice, minPrice);\n      setMaxPrice(constrainedMaxPrice);\n      setDragInProgress(false);\n    }));\n\n    // Add drag behavior to bottom handle (min price)\n    bottomHandle.call(d3.drag().on('start', function () {\n      setDragInProgress(true);\n    }).on('drag', function (event) {\n      const newY = Math.max(margin.top, Math.min(dimensions.height - margin.bottom, event.y));\n      const newMinPrice = minimapYScale.invert(newY);\n\n      // Ensure min stays below max\n      const constrainedMinPrice = Math.min(newMinPrice, maxPrice);\n\n      // Update visual position\n      d3.select(this).attr('cy', minimapYScale(constrainedMinPrice));\n\n      // Update range bar\n      g.select('.minimap-range').attr('y', minimapYScale(maxPrice)).attr('height', minimapYScale(constrainedMinPrice) - minimapYScale(maxPrice));\n\n      // Update center handle position\n      const newCenterY = (minimapYScale(maxPrice) + minimapYScale(constrainedMinPrice)) / 2;\n      centerHandle.attr('cy', newCenterY);\n\n      // Update main chart price range elements\n      g.select('.price-range-bg').attr('y', yScale(maxPrice)).attr('height', yScale(constrainedMinPrice) - yScale(maxPrice));\n      g.select('.min-line').attr('y1', yScale(constrainedMinPrice)).attr('y2', yScale(constrainedMinPrice));\n      g.select('.min-label').attr('y', yScale(constrainedMinPrice) - 5).text(`Min: ${constrainedMinPrice.toFixed(0)}`);\n    }).on('end', function (event) {\n      const newY = Math.max(margin.top, Math.min(dimensions.height - margin.bottom, event.y));\n      let newMinPrice = minimapYScale.invert(newY);\n\n      // If dragged to bottom, set to data minimum\n      if (newY >= dimensions.height - margin.bottom - 10) {\n        newMinPrice = dataMin;\n      }\n\n      // Ensure min stays below max\n      const constrainedMinPrice = Math.min(newMinPrice, maxPrice);\n      setMinPrice(constrainedMinPrice);\n      setDragInProgress(false);\n    }));\n\n    // Add drag behavior to center handle (drag entire range)\n    centerHandle.call(d3.drag().on('start', function () {\n      setDragInProgress(true);\n    }).on('drag', function (event) {\n      const newCenterY = Math.max(margin.top, Math.min(dimensions.height - margin.bottom, event.y));\n      const newCenterPrice = minimapYScale.invert(newCenterY);\n      const rangeSize = maxPrice - minPrice;\n\n      // Calculate new min/max based on center position\n      let newMaxPrice = newCenterPrice + rangeSize / 2;\n      let newMinPrice = newCenterPrice - rangeSize / 2;\n\n      // Keep within data bounds\n      if (newMaxPrice > dataMax) {\n        newMaxPrice = dataMax;\n        newMinPrice = dataMax - rangeSize;\n      }\n      if (newMinPrice < dataMin) {\n        newMinPrice = dataMin;\n        newMaxPrice = dataMin + rangeSize;\n      }\n\n      // Update visual positions\n      topHandle.attr('cy', minimapYScale(newMaxPrice));\n      bottomHandle.attr('cy', minimapYScale(newMinPrice));\n      d3.select(this).attr('cy', (minimapYScale(newMaxPrice) + minimapYScale(newMinPrice)) / 2);\n\n      // Update range bar\n      g.select('.minimap-range').attr('y', minimapYScale(newMaxPrice)).attr('height', minimapYScale(newMinPrice) - minimapYScale(newMaxPrice));\n\n      // Update main chart price range elements\n      g.select('.price-range-bg').attr('y', yScale(newMaxPrice)).attr('height', yScale(newMinPrice) - yScale(newMaxPrice));\n      g.select('.min-line').attr('y1', yScale(newMinPrice)).attr('y2', yScale(newMinPrice));\n      g.select('.max-line').attr('y1', yScale(newMaxPrice)).attr('y2', yScale(newMaxPrice));\n      g.select('.min-label').attr('y', yScale(newMinPrice) - 5).text(`Min: ${newMinPrice.toFixed(0)}`);\n      g.select('.max-label').attr('y', yScale(newMaxPrice) + 15).text(`Max: ${newMaxPrice.toFixed(0)}`);\n    }).on('end', function (event) {\n      const newCenterY = Math.max(margin.top, Math.min(dimensions.height - margin.bottom, event.y));\n      const newCenterPrice = minimapYScale.invert(newCenterY);\n      const rangeSize = maxPrice - minPrice;\n\n      // Calculate new min/max based on center position\n      let newMaxPrice = newCenterPrice + rangeSize / 2;\n      let newMinPrice = newCenterPrice - rangeSize / 2;\n\n      // Keep within data bounds\n      if (newMaxPrice > dataMax) {\n        newMaxPrice = dataMax;\n        newMinPrice = dataMax - rangeSize;\n      }\n      if (newMinPrice < dataMin) {\n        newMinPrice = dataMin;\n        newMaxPrice = dataMin + rangeSize;\n      }\n      setMinPrice(newMinPrice);\n      setMaxPrice(newMaxPrice);\n      setDragInProgress(false);\n    }));\n\n    // Setup wheel event handler\n    const handleWheel = event => {\n      event.preventDefault();\n      event.stopPropagation();\n\n      // Calculate current view bounds\n      const priceRange = priceExtent[1] - priceExtent[0];\n      const zoomedRange = priceRange / zoomLevel;\n      const currentCenter = priceExtent[0] + priceRange * 0.5 + panY * priceRange;\n      const currentMin = currentCenter - zoomedRange / 2;\n      const currentMax = currentCenter + zoomedRange / 2;\n\n      // Natural scroll sensitivity based on current view range\n      const scrollSensitivity = zoomedRange / 600; // Faster scrolling for larger ranges\n      const rawScrollAmount = event.deltaY * scrollSensitivity;\n\n      // Apply scroll (invert deltaY for natural direction)\n      const scrollAmount = rawScrollAmount / priceRange; // Normalize to pan range\n\n      setChartState(prev => {\n        const newPanY = prev.panY - scrollAmount;\n\n        // Dynamic bounds based on data and zoom level\n        const dataMin = Math.min(...allPrices);\n        const dataMax = Math.max(...allPrices);\n        const halfZoomedRange = zoomedRange / 2;\n\n        // Calculate max pan bounds to keep view within data\n        const maxPanUp = (dataMax - halfZoomedRange - (priceExtent[0] + priceRange * 0.5)) / priceRange;\n        const maxPanDown = (dataMin + halfZoomedRange - (priceExtent[0] + priceRange * 0.5)) / priceRange;\n\n        // Constrain to bounds\n        const constrainedPanY = Math.max(maxPanDown, Math.min(maxPanUp, newPanY));\n        return {\n          ...prev,\n          panY: constrainedPanY\n        };\n      });\n    };\n\n    // Add wheel event listener\n    const svgElement = svgRef.current;\n    if (svgElement) {\n      svgElement.addEventListener('wheel', handleWheel, {\n        passive: false\n      });\n\n      // Add touch support for mobile\n      let touchStartY = null;\n      let lastTouchY = null;\n      let touchStartTime = null;\n      const handleTouchStart = event => {\n        if (event.touches.length === 1) {\n          touchStartY = event.touches[0].clientY;\n          lastTouchY = touchStartY;\n          touchStartTime = Date.now();\n          event.preventDefault();\n        }\n      };\n      const handleTouchMove = event => {\n        if (event.touches.length === 1 && touchStartY !== null) {\n          const currentTouchY = event.touches[0].clientY;\n          const deltaY = lastTouchY - currentTouchY; // Inverted for natural scrolling\n\n          // Convert touch movement to pan\n          const allPrices = [...data.map(d => d.value), ...liquidityData.map(d => d.price0)];\n          const priceExtent = d3.extent(allPrices);\n          const priceRange = priceExtent[1] - priceExtent[0];\n          const zoomedRange = priceRange / zoomLevel;\n          const touchSensitivity = zoomedRange / 400; // Scale based on current zoom\n          const scrollAmount = deltaY * touchSensitivity / priceRange;\n          setChartState(prev => {\n            const newPanY = prev.panY + scrollAmount;\n\n            // Apply bounds like in wheel handler\n            const halfZoomedRange = zoomedRange / 2;\n            const dataMin = Math.min(...allPrices);\n            const dataMax = Math.max(...allPrices);\n            const maxPanUp = (dataMax - halfZoomedRange - (priceExtent[0] + priceRange * 0.5)) / priceRange;\n            const maxPanDown = (dataMin + halfZoomedRange - (priceExtent[0] + priceRange * 0.5)) / priceRange;\n            const constrainedPanY = Math.max(maxPanDown, Math.min(maxPanUp, newPanY));\n            return {\n              ...prev,\n              panY: constrainedPanY\n            };\n          });\n          lastTouchY = currentTouchY;\n          event.preventDefault();\n        }\n      };\n      const handleTouchEnd = event => {\n        touchStartY = null;\n        lastTouchY = null;\n        touchStartTime = null;\n        event.preventDefault();\n      };\n      svgElement.addEventListener('touchstart', handleTouchStart, {\n        passive: false\n      });\n      svgElement.addEventListener('touchmove', handleTouchMove, {\n        passive: false\n      });\n      svgElement.addEventListener('touchend', handleTouchEnd, {\n        passive: false\n      });\n      return () => {\n        svgElement.removeEventListener('wheel', handleWheel);\n        svgElement.removeEventListener('touchstart', handleTouchStart);\n        svgElement.removeEventListener('touchmove', handleTouchMove);\n        svgElement.removeEventListener('touchend', handleTouchEnd);\n      };\n    }\n  }, [data, liquidityData, zoomLevel, panY, yScale, current, currentTick, minPrice, maxPrice, dimensions]);\n\n  // Set reasonable initial view on first load\n  useEffect(() => {\n    if (!initialViewSet && data && liquidityData && liquidityData.length > 0) {\n      var _data2;\n      const allPrices = [...data.map(d => d.value), ...liquidityData.map(d => d.price0)];\n      const priceExtent = d3.extent(allPrices);\n      const priceRange = priceExtent[1] - priceExtent[0];\n\n      // Filter out extreme outliers for initial view - focus on middle 20% of liquidity\n      const liquidityPrices = liquidityData.map(d => d.price0).sort((a, b) => a - b);\n      const percentile20 = liquidityPrices[Math.floor(liquidityPrices.length * 0.2)];\n      const percentile80 = liquidityPrices[Math.floor(liquidityPrices.length * 0.8)];\n\n      // Set initial zoom to focus on the 20-80% range of liquidity with tighter view\n      const focusRange = percentile80 - percentile20;\n      const desiredZoom = Math.min(priceRange / (focusRange * 1), 25); // Show ~1x the focus range, max 25x zoom\n\n      // Center the view on the current price (last data point)\n      const currentPrice = (_data2 = data[data.length - 1]) === null || _data2 === void 0 ? void 0 : _data2.value;\n      const originalCenter = priceExtent[0] + priceRange * 0.5;\n      const panOffset = (currentPrice - originalCenter) / priceRange;\n\n      // Set default brush range - use a symmetrical range around current price\n      // Use 10% of the total price range for the brush range (tighter)\n      const brushRangeSize = priceRange * 0.1;\n      const defaultMinPrice = currentPrice - brushRangeSize / 2;\n      const defaultMaxPrice = currentPrice + brushRangeSize / 2;\n\n      // Update both current state and default state\n      const newDefaultState = {\n        zoomLevel: desiredZoom,\n        panY: panOffset,\n        minPrice: defaultMinPrice,\n        maxPrice: defaultMaxPrice\n      };\n      defaultState.current = newDefaultState;\n      setChartState(newDefaultState);\n      setInitialViewSet(true);\n    }\n  }, [data, liquidityData, initialViewSet]);\n  const handleZoomIn = () => {\n    const targetZoom = Math.min(zoomLevel * 1.3, 50);\n    animateToState(targetZoom, panY, null, null, 300); // Faster for zoom buttons\n  };\n  const handleZoomOut = () => {\n    const targetZoom = Math.max(zoomLevel / 1.3, 0.1);\n    animateToState(targetZoom, panY, null, null, 300); // Faster for zoom buttons\n  };\n\n  // Smooth animation utility function with optional price range animation\n  const animateToState = (targetZoom, targetPan, targetMinPrice = null, targetMaxPrice = null, duration = 400) => {\n    const startZoom = zoomLevel;\n    const startPan = panY;\n    const startMinPrice = minPrice;\n    const startMaxPrice = maxPrice;\n    const startTime = Date.now();\n    const animate = () => {\n      const elapsed = Date.now() - startTime;\n      const progress = Math.min(elapsed / duration, 1);\n\n      // Modern easeOutQuart for snappy, smooth feel\n      const easeProgress = 1 - Math.pow(1 - progress, 4);\n\n      // Interpolate zoom and pan values\n      const currentZoom = startZoom + (targetZoom - startZoom) * easeProgress;\n      const currentPan = startPan + (targetPan - startPan) * easeProgress;\n\n      // Interpolate price range if targets provided\n      let currentMinPrice = startMinPrice;\n      let currentMaxPrice = startMaxPrice;\n      if (targetMinPrice !== null && targetMaxPrice !== null) {\n        if (startMinPrice !== null && startMaxPrice !== null) {\n          currentMinPrice = startMinPrice + (targetMinPrice - startMinPrice) * easeProgress;\n          currentMaxPrice = startMaxPrice + (targetMaxPrice - startMaxPrice) * easeProgress;\n        } else {\n          // If no current range, just set the target at the end\n          if (progress === 1) {\n            currentMinPrice = targetMinPrice;\n            currentMaxPrice = targetMaxPrice;\n          }\n        }\n      }\n      setChartState(prev => ({\n        ...prev,\n        zoomLevel: currentZoom,\n        panY: currentPan,\n        minPrice: currentMinPrice,\n        maxPrice: currentMaxPrice\n      }));\n      if (progress < 1) {\n        requestAnimationFrame(animate);\n      }\n    };\n    animate();\n  };\n  const handleResetZoom = () => {\n    // Animate reset of zoom, pan, and price range\n    animateToState(defaultState.current.zoomLevel, defaultState.current.panY, defaultState.current.minPrice, defaultState.current.maxPrice, 500 // Slightly longer for full reset\n    );\n  };\n  const handleCenterRange = () => {\n    if (minPrice === null || maxPrice === null || !data || !liquidityData) return;\n\n    // Calculate all prices to get data bounds\n    const allPrices = [...data.map(d => d.value), ...liquidityData.map(d => d.price0)];\n    const priceExtent = d3.extent(allPrices);\n    const totalPriceRange = priceExtent[1] - priceExtent[0];\n\n    // Calculate range center and size\n    const rangeCenter = (minPrice + maxPrice) / 2;\n    const rangeSize = maxPrice - minPrice;\n\n    // Calculate required pan to center the range\n    const originalCenter = priceExtent[0] + totalPriceRange * 0.5;\n    const targetPanY = (rangeCenter - originalCenter) / totalPriceRange;\n\n    // Calculate required zoom to fit the range (with some padding)\n    const paddingFactor = 1.2; // 20% padding around the range\n    const visibleRangeNeeded = rangeSize * paddingFactor;\n    const currentVisibleRange = totalPriceRange / zoomLevel;\n    let targetZoomLevel = zoomLevel;\n    if (visibleRangeNeeded > currentVisibleRange) {\n      // Need to zoom out to fit the range\n      targetZoomLevel = totalPriceRange / visibleRangeNeeded;\n      targetZoomLevel = Math.max(targetZoomLevel, 0.1); // Don't zoom out too far\n    }\n\n    // Animate the transition with faster, smoother timing\n    animateToState(targetZoomLevel, targetPanY, null, null, 500);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: containerRef,\n    style: {\n      width: '100%'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginBottom: '10px',\n        background: '#f9f9f9',\n        padding: '12px',\n        borderRadius: '4px',\n        border: '1px solid #ddd',\n        display: 'flex',\n        gap: dimensions.width <= 768 ? '8px' : '20px',\n        alignItems: 'flex-start',\n        flexWrap: 'wrap',\n        fontSize: dimensions.width <= 768 ? '10px' : '12px',\n        padding: dimensions.width <= 768 ? '8px' : '12px'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            marginBottom: '4px',\n            fontSize: '12px',\n            fontWeight: 'bold'\n          },\n          children: [\"Zoom: \", zoomLevel.toFixed(1), \"x\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1374,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            display: 'flex',\n            gap: '4px',\n            marginBottom: '4px',\n            flexWrap: 'wrap'\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: handleZoomIn,\n            style: {\n              fontSize: dimensions.width <= 768 ? '10px' : '12px',\n              padding: dimensions.width <= 768 ? '6px 10px' : '4px 8px',\n              minHeight: dimensions.width <= 768 ? '32px' : 'auto'\n            },\n            children: \"Zoom In (+)\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1378,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: handleZoomOut,\n            style: {\n              fontSize: dimensions.width <= 768 ? '10px' : '12px',\n              padding: dimensions.width <= 768 ? '6px 10px' : '4px 8px',\n              minHeight: dimensions.width <= 768 ? '32px' : 'auto'\n            },\n            children: \"Zoom Out (-)\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1385,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: handleResetZoom,\n            style: {\n              fontSize: dimensions.width <= 768 ? '10px' : '12px',\n              padding: dimensions.width <= 768 ? '6px 10px' : '4px 8px',\n              minHeight: dimensions.width <= 768 ? '32px' : 'auto'\n            },\n            children: \"Reset\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1392,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: handleCenterRange,\n            disabled: minPrice === null || maxPrice === null,\n            style: {\n              fontSize: dimensions.width <= 768 ? '10px' : '12px',\n              padding: dimensions.width <= 768 ? '6px 10px' : '4px 8px',\n              minHeight: dimensions.width <= 768 ? '32px' : 'auto',\n              opacity: minPrice === null || maxPrice === null ? 0.5 : 1,\n              cursor: minPrice === null || maxPrice === null ? 'not-allowed' : 'pointer'\n            },\n            children: dimensions.width <= 768 ? 'Center' : 'Center Range'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1399,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1377,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            fontSize: '10px',\n            color: '#666',\n            textAlign: 'center'\n          },\n          children: \"Scroll to pan\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1413,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1373,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            marginBottom: '4px',\n            fontSize: '12px',\n            fontWeight: 'bold'\n          },\n          children: \"Price Range\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1420,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            display: 'flex',\n            gap: '8px',\n            alignItems: 'center',\n            flexWrap: 'wrap'\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              display: 'flex',\n              alignItems: 'center',\n              gap: '4px'\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              style: {\n                fontSize: '11px',\n                minWidth: '30px'\n              },\n              children: \"Min:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1425,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"number\",\n              value: minPrice || '',\n              onChange: e => setMinPrice(e.target.value ? parseFloat(e.target.value) : null),\n              style: {\n                fontSize: dimensions.width <= 768 ? '10px' : '11px',\n                padding: dimensions.width <= 768 ? '6px 8px' : '4px 6px',\n                border: '1px solid #ccc',\n                borderRadius: '4px',\n                width: dimensions.width <= 768 ? '70px' : '90px',\n                minHeight: dimensions.width <= 768 ? '32px' : 'auto'\n              },\n              step: \"0.01\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1426,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1424,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              display: 'flex',\n              alignItems: 'center',\n              gap: '4px'\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              style: {\n                fontSize: '11px',\n                minWidth: '30px'\n              },\n              children: \"Max:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1442,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"number\",\n              value: maxPrice || '',\n              onChange: e => setMaxPrice(e.target.value ? parseFloat(e.target.value) : null),\n              style: {\n                fontSize: dimensions.width <= 768 ? '10px' : '11px',\n                padding: dimensions.width <= 768 ? '6px 8px' : '4px 6px',\n                border: '1px solid #ccc',\n                borderRadius: '4px',\n                width: dimensions.width <= 768 ? '70px' : '90px',\n                minHeight: dimensions.width <= 768 ? '32px' : 'auto'\n              },\n              step: \"0.01\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1443,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1441,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => {\n              setMinPrice(null);\n              setMaxPrice(null);\n            },\n            style: {\n              fontSize: dimensions.width <= 768 ? '10px' : '11px',\n              padding: dimensions.width <= 768 ? '6px 10px' : '4px 8px',\n              backgroundColor: '#fff',\n              border: '1px solid #ccc',\n              borderRadius: '4px',\n              cursor: 'pointer',\n              minHeight: dimensions.width <= 768 ? '32px' : 'auto'\n            },\n            children: \"Clear Range\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1458,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1423,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1419,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1359,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        position: 'relative',\n        width: '100%',\n        overflow: 'hidden'\n      },\n      children: /*#__PURE__*/_jsxDEV(\"svg\", {\n        ref: svgRef,\n        width: dimensions.width,\n        height: dimensions.height,\n        style: {\n          border: '1px solid #ccc',\n          display: 'block',\n          maxWidth: '100%',\n          touchAction: 'manipulation' // Optimizes for touch interactions\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1481,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1476,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 1357,\n    columnNumber: 5\n  }, this);\n};\n_s(D3Chart, \"c9dIyyG7JPyImo032BKui2UUoFw=\");\n_c = D3Chart;\nexport default D3Chart;\nvar _c;\n$RefreshReg$(_c, \"D3Chart\");","map":{"version":3,"names":["React","useEffect","useRef","useState","useMemo","d3","PriceRange","PriceDragPoints","jsxDEV","_jsxDEV","priceDataCache","Map","findClosestElementBinarySearch","data","target","_data$right","_data$left","left","right","length","has","toString","get","mid","Math","floor","price0","set","closest","Infinity","nextClosest","closestElement","abs","scaleToInteger","a","precision","scaleFactor","pow","round","D3Chart","liquidityData","_s","svgRef","containerRef","initialViewSet","setInitialViewSet","dragInProgress","setDragInProgress","dimensions","setDimensions","isMobile","window","innerWidth","width","max","min","height","innerHeight","handleResize","prev","timeoutId","setTimeout","intervalId","setInterval","addEventListener","clearInterval","clearTimeout","removeEventListener","defaultState","zoomLevel","panY","minPrice","maxPrice","chartState","setChartState","current","_data","value","currentTick","_findClosestElementBi","tick","brushExtent","setBrushExtent","extent","setMinPrice","price","setMaxPrice","setZoomLevel","zoom","setPanY","pan","yScale","allPrices","map","d","priceExtent","priceRange","zoomedRange","centerPrice","scaleLinear","domain","range","svg","select","selectAll","remove","margin","top","bottom","g","append","attr","priceData","date","Date","time","xScale","scaleTime","line","x","y","curve","curveMonotoneX","i","currentPoint","nextPoint","isInRange","color","datum","liquidityWidth","liquidityYScale","currentPriceRange","currentZoomedRange","currentCenterPrice","visibleMinPrice","visibleMaxPrice","visibleLiquidityData","filter","maxVisibleLiquidity","activeLiquidity","liquidityXScale","bars","exit","transition","duration","style","enterBars","enter","merge","parseFloat","minY","maxY","linesAreTooClose","call","drag","on","event","currentRangeCenterY","_dragOffsetY","adjustedY","newCenterY","draggedPrice","invert","rangeSize","newMaxPrice","newMinPrice","dataMin","dataMax","newMaxY","newMinY","text","toFixed","minimapYScale","newY","newPrice","currentMaxY","draggedMinPrice","draggedMaxPrice","currentMinY","minimapWidth","minimapX","minimapPrices","fullDataRange","currentCenter","viewportMinPrice","viewportMaxPrice","viewportHeight","currentRangeHeight","minimapRange","newCenterPrice","topHandle","bottomHandle","newCenterHandleY","centerHandle","rangeCenterInData","dataCenterPosition","handleRadius","centerY","constrainedMaxPrice","constrainedMinPrice","handleWheel","preventDefault","stopPropagation","currentMin","currentMax","scrollSensitivity","rawScrollAmount","deltaY","scrollAmount","newPanY","halfZoomedRange","maxPanUp","maxPanDown","constrainedPanY","svgElement","passive","touchStartY","lastTouchY","touchStartTime","handleTouchStart","touches","clientY","now","handleTouchMove","currentTouchY","touchSensitivity","handleTouchEnd","_data2","liquidityPrices","sort","b","percentile20","percentile80","focusRange","desiredZoom","currentPrice","originalCenter","panOffset","brushRangeSize","defaultMinPrice","defaultMaxPrice","newDefaultState","handleZoomIn","targetZoom","animateToState","handleZoomOut","targetPan","targetMinPrice","targetMaxPrice","startZoom","startPan","startMinPrice","startMaxPrice","startTime","animate","elapsed","progress","easeProgress","currentZoom","currentPan","currentMinPrice","currentMaxPrice","requestAnimationFrame","handleResetZoom","handleCenterRange","totalPriceRange","rangeCenter","targetPanY","paddingFactor","visibleRangeNeeded","currentVisibleRange","targetZoomLevel","ref","children","marginBottom","background","padding","borderRadius","border","display","gap","alignItems","flexWrap","fontSize","fontWeight","fileName","_jsxFileName","lineNumber","columnNumber","onClick","minHeight","disabled","opacity","cursor","textAlign","minWidth","type","onChange","e","step","backgroundColor","position","overflow","maxWidth","touchAction","_c","$RefreshReg$"],"sources":["/Users/phil.london/Projects/tradingview-chart-mvp/src/D3Chart.js"],"sourcesContent":["import React, { useEffect, useRef, useState, useMemo } from 'react';\nimport * as d3 from 'd3';\nimport PriceRange from './PriceRange';\nimport PriceDragPoints from './PriceDragPoints';\n\n// Cache for price data lookups\nconst priceDataCache = new Map();\n\nfunction findClosestElementBinarySearch(data, target) {\n  let left = 0;\n  let right = data.length - 1;\n\n  if (!target) {\n    return null;\n  }\n\n  if (priceDataCache.has(target.toString())) {\n    return priceDataCache.get(target.toString());\n  }\n\n  while (left <= right) {\n    const mid = Math.floor((left + right) / 2);\n\n    if (data[mid].price0 === target) {\n      priceDataCache.set(target.toString(), data[mid]);\n      return data[mid];\n    } else if (data[mid].price0 < target) {\n      left = mid + 1;\n    } else {\n      right = mid - 1;\n    }\n  }\n\n  // After binary search, left and right are the closest bounds\n  const closest = data[right] ?? { price0: Infinity }; // Handle bounds\n  const nextClosest = data[left] ?? { price0: Infinity };\n\n  // Return the element with the closest `price0`\n  const closestElement =\n    Math.abs(closest.price0 - target) <= Math.abs(nextClosest.price0 - target) ? closest : nextClosest;\n\n  priceDataCache.set(target.toString(), closestElement);\n  return closestElement;\n}\n\nfunction scaleToInteger(a, precision = 18) {\n  const scaleFactor = Math.pow(10, precision);\n  return Math.round(a * scaleFactor);\n}\n\nconst D3Chart = ({ data, liquidityData }) => {\n  const svgRef = useRef();\n  const containerRef = useRef();\n  const [initialViewSet, setInitialViewSet] = useState(false);\n  const [dragInProgress, setDragInProgress] = useState(false);\n  const [dimensions, setDimensions] = useState(() => {\n    // Initialize with viewport-based dimensions\n    const isMobile = window.innerWidth <= 768;\n    return {\n      width: Math.max(300, Math.min(window.innerWidth - 20, 900)),\n      height: isMobile ? Math.min(300, window.innerHeight * 0.4) : 400\n    };\n  });\n  \n  // Handle resize for responsiveness\n  useEffect(() => {\n      const handleResize = () => {\n      // Always calculate based on window size for immediate responsiveness\n      const isMobile = window.innerWidth <= 768;\n      const height = isMobile ? Math.min(300, window.innerHeight * 0.4) : 400;\n      const width = Math.max(300, Math.min(window.innerWidth - 20, isMobile ? window.innerWidth - 20 : 900));\n      \n      setDimensions(prev => {\n        // Only update if dimensions actually changed to avoid unnecessary re-renders\n        if (prev.width !== width || prev.height !== height) {\n          return { width, height };\n        }\n        return prev;\n      });\n    };\n\n    // Use a timeout to ensure DOM is ready and multiple calls for better reliability\n    const timeoutId = setTimeout(handleResize, 100);\n    const intervalId = setInterval(handleResize, 500); // Check periodically initially\n    \n    window.addEventListener('resize', handleResize);\n    window.addEventListener('orientationchange', () => {\n      setTimeout(handleResize, 300); // Handle mobile orientation changes\n    });\n    \n    // Stop the interval after a few seconds\n    setTimeout(() => clearInterval(intervalId), 3000);\n    \n    return () => {\n      clearTimeout(timeoutId);\n      clearInterval(intervalId);\n      window.removeEventListener('resize', handleResize);\n    };\n  }, []);\n  \n  // Default state object\n  const defaultState = useRef({\n    zoomLevel: 1,\n    panY: 0,\n    minPrice: null,\n    maxPrice: null\n  });\n  \n  // Main state object\n  const [chartState, setChartState] = useState({\n    zoomLevel: 1,\n    panY: 0,\n    minPrice: null,\n    maxPrice: null\n  });\n  \n  // Destructure for easier access\n  const { zoomLevel, panY, minPrice, maxPrice } = chartState;\n  \n  // Calculate current price from the last entry\n  const current = useMemo(() => {\n    return data && data.length > 0 ? data[data.length - 1]?.value : null;\n  }, [data]);\n  \n  // Calculate currentTick based on current price\n  const currentTick = useMemo(() => {\n    if (!current || !liquidityData) return null;\n    return findClosestElementBinarySearch(liquidityData, current)?.tick;\n  }, [current, liquidityData]);\n  \n  // Brush extent as [min, max] array\n  const brushExtent = useMemo(() => {\n    if (minPrice !== null && maxPrice !== null) {\n      return [minPrice, maxPrice];\n    }\n    return null;\n  }, [minPrice, maxPrice]);\n  \n  const setBrushExtent = (extent) => {\n    if (extent && extent.length === 2) {\n      setChartState(prev => ({\n        ...prev,\n        minPrice: extent[0],\n        maxPrice: extent[1]\n      }));\n    } else {\n      setChartState(prev => ({\n        ...prev,\n        minPrice: null,\n        maxPrice: null\n      }));\n    }\n  };\n  \n  // Helper functions for updating individual state properties\n  const setMinPrice = (price) => setChartState(prev => ({ ...prev, minPrice: price }));\n  const setMaxPrice = (price) => setChartState(prev => ({ ...prev, maxPrice: price }));\n  const setZoomLevel = (zoom) => setChartState(prev => ({ ...prev, zoomLevel: zoom }));\n  const setPanY = (pan) => setChartState(prev => ({ ...prev, panY: pan }));\n\n  // Calculate yScale outside useEffect so it's available for Brush component\n  const yScale = useMemo(() => {\n    if (!data || !liquidityData) return null;\n    \n    const allPrices = [\n      ...data.map(d => d.value),\n      ...liquidityData.map(d => d.price0)\n    ];\n    const priceExtent = d3.extent(allPrices);\n    \n    const priceRange = priceExtent[1] - priceExtent[0];\n    const zoomedRange = priceRange / zoomLevel;\n    const centerPrice = priceExtent[0] + priceRange * 0.5 + panY * priceRange;\n    \n    return d3.scaleLinear()\n      .domain([\n        centerPrice - zoomedRange / 2,\n        centerPrice + zoomedRange / 2\n      ])\n      .range([dimensions.height - 20 - 50, 0]); // [height, 0] for proper D3 coordinate system\n  }, [data, liquidityData, zoomLevel, panY, dimensions]);\n\n  useEffect(() => {\n    if (!data || !liquidityData || !yScale) return;\n\n    const svg = d3.select(svgRef.current);\n    svg.selectAll(\"g\").remove(); // Only remove D3-created elements, not React elements\n\n    const isMobile = window.innerWidth <= 768;\n    const margin = { \n      top: 20, \n      right: isMobile ? 120 : 180, // Reduce right margin on mobile\n      bottom: 50, \n      left: isMobile ? 60 : 80 // Reduce left margin on mobile\n    };\n    const width = dimensions.width - margin.left - margin.right;\n    const height = dimensions.height - margin.top - margin.bottom;\n\n    const g = svg.append(\"g\")\n      .attr(\"transform\", `translate(${margin.left},${margin.top})`);\n\n    // Convert timestamps to dates for price data\n    const priceData = data.map(d => ({\n      date: new Date(d.time * 1000),\n      value: d.value\n    }));\n\n    // Unified price scale encompassing both price data and liquidity data\n    const allPrices = [\n      ...priceData.map(d => d.value),\n      ...liquidityData.map(d => d.price0)\n    ];\n    const priceExtent = d3.extent(allPrices);\n\n    // Scales for price line chart\n    const xScale = d3.scaleTime()\n      .domain(d3.extent(priceData, d => d.date))\n      .range([-margin.left, width - 40]); // Extend left but stop before liquidity section\n\n    // Line generator for price\n    const line = d3.line()\n      .x(d => xScale(d.date))\n      .y(d => yScale(d.value))\n      .curve(d3.curveMonotoneX);\n\n    // Draw price line with conditional coloring\n    if (minPrice !== null && maxPrice !== null) {\n      // Draw segments with different colors based on price range\n      for (let i = 0; i < priceData.length - 1; i++) {\n        const currentPoint = priceData[i];\n        const nextPoint = priceData[i + 1];\n        \n        // Check if current point is within range\n        const isInRange = currentPoint.value >= minPrice && currentPoint.value <= maxPrice;\n        const color = isInRange ? \"#d63384\" : \"#888888\"; // Dark pink or grey\n        \n        // Draw line segment between current and next point\n        g.append(\"path\")\n          .datum([currentPoint, nextPoint])\n          .attr(\"fill\", \"none\")\n          .attr(\"stroke\", color)\n          .attr(\"stroke-width\", 2)\n          .attr(\"d\", line)\n          .attr(\"class\", \"price-segment\");\n      }\n    } else {\n      // Draw single blue line when no range is selected\n      g.append(\"path\")\n        .datum(priceData)\n        .attr(\"fill\", \"none\")\n        .attr(\"stroke\", \"#2196F3\")\n        .attr(\"stroke-width\", 2)\n        .attr(\"d\", line)\n        .attr(\"class\", \"price-line\");\n    }\n\n    // Remove X and left Y axes completely\n\n    // Right side liquidity chart - inspired by Uniswap's approach\n    const liquidityWidth = margin.right; // Use full margin width\n    \n    // Use the same unified y scale for liquidity positioning\n    const liquidityYScale = yScale;\n\n    // Calculate current visible price range for filtering liquidity data\n    const currentPriceRange = priceExtent[1] - priceExtent[0];\n    const currentZoomedRange = currentPriceRange / zoomLevel;\n    const currentCenterPrice = priceExtent[0] + currentPriceRange * 0.5 + panY * currentPriceRange;\n    const visibleMinPrice = currentCenterPrice - currentZoomedRange / 2;\n    const visibleMaxPrice = currentCenterPrice + currentZoomedRange / 2;\n\n    // Filter liquidity data to only entries within visible price range\n    const visibleLiquidityData = liquidityData.filter(d => \n      d.price0 >= visibleMinPrice && d.price0 <= visibleMaxPrice\n    );\n\n    // X scale for liquidity amounts - scale based only on visible entries\n    const maxVisibleLiquidity = visibleLiquidityData.length > 0 \n      ? d3.max(visibleLiquidityData, d => d.activeLiquidity)\n      : d3.max(liquidityData, d => d.activeLiquidity); // Fallback if no visible data\n\n    const liquidityXScale = d3.scaleLinear()\n      .domain([0, maxVisibleLiquidity])\n      .range([0, liquidityWidth]); // Back to liquidity section width\n\n    // Draw very thin grey horizontal liquidity bars using data join for better performance\n    const bars = g.selectAll(\".liquidity-bar\")\n      .data(liquidityData, d => d.price0); // Use price as key for consistent updates\n    \n    // Remove bars that are no longer needed\n    bars.exit()\n      .transition()\n      .duration(150)\n      .style(\"opacity\", 0)\n      .remove();\n    \n    // Add new bars\n    const enterBars = bars.enter()\n      .append(\"rect\")\n      .attr(\"class\", \"liquidity-bar\")\n      .attr(\"height\", 1)\n      .attr(\"opacity\", 0.7)\n      .attr(\"x\", d => width + 10 + liquidityWidth - liquidityXScale(d.activeLiquidity) - 40)\n      .attr(\"y\", d => liquidityYScale(d.price0) - 0.5)\n      .attr(\"width\", d => liquidityXScale(d.activeLiquidity));\n    \n    // Update existing bars with smooth transitions and conditional coloring\n    bars.merge(enterBars)\n      .transition()\n      .duration(100)\n      .attr(\"x\", d => width + 10 + liquidityWidth - liquidityXScale(d.activeLiquidity) - 40)\n      .attr(\"y\", d => liquidityYScale(d.price0) - 0.5)\n      .attr(\"width\", d => liquidityXScale(d.activeLiquidity))\n      .attr(\"fill\", d => {\n        // Check if bar is within the price range - ensure proper number comparison\n        const price = parseFloat(d.price0);\n        const min = parseFloat(minPrice);\n        const max = parseFloat(maxPrice);\n        \n        if (minPrice !== null && maxPrice !== null && \n            price >= min && price <= max) {\n          return \"#d63384\"; // Dark pink for bars within range\n        }\n        return \"#888888\"; // Default grey\n      });\n\n    // No price labels needed\n\n    // Draw price range visualization directly in the main chart\n    if (minPrice !== null && maxPrice !== null) {\n      // Remove existing range elements\n      g.selectAll(\".price-range-element\").remove();\n      \n      // Check if lines are too close together (less than 5px apart)\n      const minY = yScale(minPrice);\n      const maxY = yScale(maxPrice);\n      const linesAreTooClose = Math.abs(minY - maxY) < 5;\n      \n      // Draw transparent pink background between min and max - extend to cover full chart area\n      g.append('rect')\n        .attr('class', 'price-range-element price-range-bg')\n        .attr('x', -margin.left) // Extend left to cover the margin area\n        .attr('y', yScale(maxPrice))\n        .attr('width', dimensions.width) // Cover the entire SVG width\n        .attr('height', yScale(minPrice) - yScale(maxPrice))\n        .attr('fill', '#ff69b4')\n        .attr('fill-opacity', 0.15)\n        .attr('stroke', 'none') // Remove any border from background\n        .attr('cursor', 'move')\n        .call(d3.drag()\n          .on('start', function(event) {\n            setDragInProgress(true);\n            // Store the initial click offset relative to the range center\n            const currentRangeCenterY = (yScale(maxPrice) + yScale(minPrice)) / 2;\n            this._dragOffsetY = event.y - currentRangeCenterY;\n          })\n          .on('drag', function(event) {\n            // Apply the stored offset to maintain consistent drag feel\n            const adjustedY = event.y - this._dragOffsetY;\n            const newCenterY = Math.max(0, Math.min(height, adjustedY));\n            const draggedPrice = yScale.invert(newCenterY);\n            const rangeSize = maxPrice - minPrice;\n            \n            // Calculate new min/max based on dragged center position\n            const newMaxPrice = draggedPrice + rangeSize / 2;\n            const newMinPrice = draggedPrice - rangeSize / 2;\n            \n            // Get data bounds to prevent dragging outside chart\n            const allPrices = [\n              ...data.map(d => d.value),\n              ...liquidityData.map(d => d.price0)\n            ];\n            const dataMin = Math.min(...allPrices);\n            const dataMax = Math.max(...allPrices);\n            \n            // Only update if range stays within data bounds\n            if (newMinPrice >= dataMin && newMaxPrice <= dataMax) {\n              // Update background position\n              const newMaxY = yScale(newMaxPrice);\n              const newMinY = yScale(newMinPrice);\n              \n              d3.select(this)\n                .attr('y', newMaxY)\n                .attr('height', newMinY - newMaxY);\n              \n              // Update min line\n              g.select('.min-line')\n                .attr('y1', newMinY)\n                .attr('y2', newMinY);\n                \n              // Update max line\n              g.select('.max-line')\n                .attr('y1', newMaxY)\n                .attr('y2', newMaxY);\n                \n              // Update labels\n              g.select('.min-label')\n                .attr('x', -68)\n                .attr('y', newMinY - 5)\n                .text(`Min: ${newMinPrice.toFixed(0)}`);\n                \n              g.select('.max-label')\n                .attr('x', -68)\n                .attr('y', newMaxY + 15)\n                .text(`Max: ${newMaxPrice.toFixed(0)}`);\n                \n              // Update liquidity bar colors\n              g.selectAll('.liquidity-bar')\n                .attr('fill', d => {\n                  const price = parseFloat(d.price0);\n                  if (price >= newMinPrice && price <= newMaxPrice) {\n                    return \"#d63384\";\n                  }\n                  return \"#888888\";\n                });\n                \n              // Update price line segment colors\n              g.selectAll('.price-segment')\n                .attr('stroke', function() {\n                  const datum = d3.select(this).datum();\n                  if (datum && datum.length > 0) {\n                    const value = datum[0].value;\n                    return (value >= newMinPrice && value <= newMaxPrice) ? \"#d63384\" : \"#888888\";\n                  }\n                  return \"#888888\";\n                });\n                \n              // Update minimap controls to reflect new positions\n              g.select('.minimap-range')\n                .attr('y', minimapYScale(newMaxPrice))\n                .attr('height', minimapYScale(newMinPrice) - minimapYScale(newMaxPrice));\n                \n              g.select('.max-handle')\n                .attr('cy', minimapYScale(newMaxPrice));\n                \n              g.select('.min-handle')\n                .attr('cy', minimapYScale(newMinPrice));\n                \n              g.select('.center-handle')\n                .attr('cy', (minimapYScale(newMaxPrice) + minimapYScale(newMinPrice)) / 2);\n            }\n          })\n          .on('end', function(event) {\n            // Apply the same offset calculation for consistency\n            const adjustedY = event.y - this._dragOffsetY;\n            const newCenterY = Math.max(margin.top, Math.min(dimensions.height - margin.bottom, adjustedY));\n            const draggedPrice = yScale.invert(newCenterY);\n            const rangeSize = maxPrice - minPrice;\n            \n            // Calculate new min/max based on dragged center position\n            const newMaxPrice = draggedPrice + rangeSize / 2;\n            const newMinPrice = draggedPrice - rangeSize / 2;\n            \n            // Get data bounds\n            const allPrices = [\n              ...data.map(d => d.value),\n              ...liquidityData.map(d => d.price0)\n            ];\n            const dataMin = Math.min(...allPrices);\n            const dataMax = Math.max(...allPrices);\n            \n            // Only update state if range stays within data bounds\n            if (newMinPrice >= dataMin && newMaxPrice <= dataMax) {\n              setMinPrice(newMinPrice);\n              setMaxPrice(newMaxPrice);\n            }\n            \n            setDragInProgress(false);\n          })\n        );\n\n      // Draw min price line (solid) with drag behavior\n      g.append('line')\n        .attr('class', 'price-range-element min-line')\n        .attr('x1', -margin.left) // Start from left margin\n        .attr('x2', dimensions.width - margin.left) // Extend to right edge\n        .attr('y1', yScale(minPrice))\n        .attr('y2', yScale(minPrice))\n        .attr('stroke', '#131313')\n        .attr('stroke-width', 2)\n        .attr('opacity', 0.08)\n        .attr('cursor', 'ns-resize')\n        .call(d3.drag()\n          .on('start', function() {\n            setDragInProgress(true);\n          })\n          .on('drag', function(event) {\n            const newY = Math.max(-margin.top, Math.min(height + margin.bottom, event.y));\n            const newPrice = yScale.invert(newY);\n            \n            // Update visual position immediately\n            d3.select(this)\n              .attr('y1', newY)\n              .attr('y2', newY);\n            \n            // Determine which line represents min and max during drag\n            const currentMaxY = yScale(maxPrice);\n            let draggedMinPrice = newPrice;\n            let draggedMaxPrice = maxPrice;\n            \n            // Handle visual swapping if lines cross\n            if (newY < currentMaxY) {\n              // Min line dragged above max line - swap visually\n              draggedMinPrice = maxPrice;\n              draggedMaxPrice = newPrice;\n              \n              // Update max line color to min color and vice versa\n              g.select('.max-line')\n                .attr('stroke', '#131313'); // Same color for both\n              d3.select(this)\n                .attr('stroke', '#131313'); // Same color for both\n            } else {\n              // Lines in normal order - restore original colors\n              g.select('.max-line')\n                .attr('stroke', '#131313'); // Same color for both\n              d3.select(this)\n                .attr('stroke', '#131313'); // Same color for both\n            }\n            \n            // Update background\n            g.select('.price-range-bg')\n              .attr('y', yScale(draggedMaxPrice))\n              .attr('height', yScale(draggedMinPrice) - yScale(draggedMaxPrice));\n            \n            // Update labels\n            g.select('.min-label')\n              .attr('x', -68)\n              .attr('y', yScale(draggedMinPrice) - 5)\n              .text(`Min: ${draggedMinPrice.toFixed(0)}`);\n            g.select('.max-label')\n              .attr('x', -68)\n              .attr('y', yScale(draggedMaxPrice) + 15)\n              .text(`Max: ${draggedMaxPrice.toFixed(0)}`);\n            \n            // Update liquidity bar colors\n            g.selectAll('.liquidity-bar')\n              .attr('fill', d => {\n                const price = parseFloat(d.price0);\n                if (price >= draggedMinPrice && price <= draggedMaxPrice) {\n                  return \"#d63384\";\n                }\n                return \"#888888\";\n              });\n            \n            // Update price line segment colors\n            g.selectAll('.price-segment')\n              .attr('stroke', function() {\n                const datum = d3.select(this).datum();\n                if (datum && datum.length > 0) {\n                  const value = datum[0].value;\n                  return (value >= draggedMinPrice && value <= draggedMaxPrice) ? \"#d63384\" : \"#888888\";\n                }\n                return \"#888888\";\n              });\n              \n            // Update minimap controls for min line drag\n            g.select('.minimap-range')\n              .attr('y', minimapYScale(draggedMaxPrice))\n              .attr('height', minimapYScale(draggedMinPrice) - minimapYScale(draggedMaxPrice));\n              \n            g.select('.max-handle')\n              .attr('cy', minimapYScale(draggedMaxPrice));\n              \n            g.select('.min-handle')\n              .attr('cy', minimapYScale(draggedMinPrice));\n              \n            g.select('.center-handle')\n              .attr('cy', (minimapYScale(draggedMaxPrice) + minimapYScale(draggedMinPrice)) / 2);\n          })\n          .on('end', function(event) {\n            const newY = Math.max(-margin.top, Math.min(height + margin.bottom, event.y));\n            const newPrice = yScale.invert(newY);\n            \n            // Handle final state update with proper min/max ordering\n            if (newPrice > maxPrice) {\n              // Min dragged above max - swap them in state\n              setMinPrice(maxPrice);\n              setMaxPrice(newPrice);\n            } else {\n              // Normal case - just update min\n              setMinPrice(newPrice);\n            }\n            \n            setDragInProgress(false);\n          })\n        );\n\n      // Draw max price line (solid) with drag behavior\n      g.append('line')\n        .attr('class', 'price-range-element max-line')\n        .attr('x1', -margin.left) // Start from left margin\n        .attr('x2', dimensions.width - margin.left) // Extend to right edge\n        .attr('y1', yScale(maxPrice))\n        .attr('y2', yScale(maxPrice))\n        .attr('stroke', '#131313')\n        .attr('stroke-width', 2)\n        .attr('opacity', 0.08)\n        .attr('cursor', 'ns-resize')\n        .call(d3.drag()\n          .on('start', function() {\n            setDragInProgress(true);\n          })\n          .on('drag', function(event) {\n            const newY = Math.max(-margin.top, Math.min(height + margin.bottom, event.y));\n            const newPrice = yScale.invert(newY);\n            \n            // Update visual position immediately\n            d3.select(this)\n              .attr('y1', newY)\n              .attr('y2', newY);\n            \n            // Determine which line represents min and max during drag\n            const currentMinY = yScale(minPrice);\n            let draggedMinPrice = minPrice;\n            let draggedMaxPrice = newPrice;\n            \n            // Handle visual swapping if lines cross\n            if (newY > currentMinY) {\n              // Max line dragged below min line - swap visually\n              draggedMinPrice = newPrice;\n              draggedMaxPrice = minPrice;\n              \n              // Update min line color to max color and vice versa\n              g.select('.min-line')\n                .attr('stroke', '#131313'); // Same color for both\n              d3.select(this)\n                .attr('stroke', '#131313'); // Same color for both\n            } else {\n              // Lines in normal order - restore original colors\n              g.select('.min-line')\n                .attr('stroke', '#131313'); // Same color for both\n              d3.select(this)\n                .attr('stroke', '#131313'); // Same color for both\n            }\n            \n            // Update background\n            g.select('.price-range-bg')\n              .attr('y', yScale(draggedMaxPrice))\n              .attr('height', yScale(draggedMinPrice) - yScale(draggedMaxPrice));\n            \n            // Update labels\n            g.select('.min-label')\n              .attr('x', -68)\n              .attr('y', yScale(draggedMinPrice) - 5)\n              .text(`Min: ${draggedMinPrice.toFixed(0)}`);\n            g.select('.max-label')\n              .attr('x', -68)\n              .attr('y', yScale(draggedMaxPrice) + 15)\n              .text(`Max: ${draggedMaxPrice.toFixed(0)}`);\n            \n            // Update liquidity bar colors\n            g.selectAll('.liquidity-bar')\n              .attr('fill', d => {\n                const price = parseFloat(d.price0);\n                if (price >= draggedMinPrice && price <= draggedMaxPrice) {\n                  return \"#d63384\";\n                }\n                return \"#888888\";\n              });\n            \n            // Update price line segment colors\n            g.selectAll('.price-segment')\n              .attr('stroke', function() {\n                const datum = d3.select(this).datum();\n                if (datum && datum.length > 0) {\n                  const value = datum[0].value;\n                  return (value >= draggedMinPrice && value <= draggedMaxPrice) ? \"#d63384\" : \"#888888\";\n                }\n                return \"#888888\";\n              });\n              \n            // Update minimap controls for max line drag\n            g.select('.minimap-range')\n              .attr('y', minimapYScale(draggedMaxPrice))\n              .attr('height', minimapYScale(draggedMinPrice) - minimapYScale(draggedMaxPrice));\n              \n            g.select('.max-handle')\n              .attr('cy', minimapYScale(draggedMaxPrice));\n              \n            g.select('.min-handle')\n              .attr('cy', minimapYScale(draggedMinPrice));\n              \n            g.select('.center-handle')\n              .attr('cy', (minimapYScale(draggedMaxPrice) + minimapYScale(draggedMinPrice)) / 2);\n          })\n          .on('end', function(event) {\n            const newY = Math.max(-margin.top, Math.min(height + margin.bottom, event.y));\n            const newPrice = yScale.invert(newY);\n            \n            // Handle final state update with proper min/max ordering\n            if (newPrice < minPrice) {\n              // Max dragged below min - swap them in state\n              setMaxPrice(minPrice);\n              setMinPrice(newPrice);\n            } else {\n              // Normal case - just update max\n              setMaxPrice(newPrice);\n            }\n            \n            setDragInProgress(false);\n          })\n        );\n        \n      // Add min price label\n      g.append('text')\n        .attr('class', 'price-range-element min-label')\n        .attr('x', -margin.left + 12) // 12px from left border\n        .attr('y', yScale(minPrice) - 5)\n        .attr('font-size', '10px')\n        .attr('fill', '#131313')\n        .attr('font-weight', 'bold')\n        .text(`Min: ${minPrice.toFixed(0)}`);\n        \n      // Add max price label\n      g.append('text')\n        .attr('class', 'price-range-element max-label')\n        .attr('x', -margin.left + 12) // 12px from left border\n        .attr('y', yScale(maxPrice) + 15)\n        .attr('font-size', '10px')\n        .attr('fill', '#131313')\n        .attr('font-weight', 'bold')\n        .text(`Max: ${maxPrice.toFixed(0)}`);\n    }\n\n    // Draw current price line (dotted) if current price exists\n    if (current !== null) {\n      // Remove existing current price line\n      g.selectAll('.current-price-line').remove();\n      g.selectAll('.current-price-label').remove();\n      \n      // Draw dotted line across the entire chart for current price\n      g.append('line')\n        .attr('class', 'current-price-line')\n        .attr('x1', -margin.left) // Start from left margin\n        .attr('x2', dimensions.width - margin.left) // Extend to right edge\n        .attr('y1', yScale(current))\n        .attr('y2', yScale(current))\n        .attr('stroke', '#666666') // Grey color\n        .attr('stroke-width', 2)\n        .attr('stroke-dasharray', '5,5') // Dotted line pattern\n        .attr('opacity', 0.8);\n        \n      // Add current price label on the left like min/max\n      g.append('text')\n        .attr('class', 'current-price-label')\n        .attr('x', -margin.left + 12) // 12px from left border\n        .attr('y', yScale(current) - 5)\n        .attr('font-size', '10px')\n        .attr('fill', '#666666') // Grey color\n        .attr('font-weight', 'bold')\n        .text(`Current: ${current.toFixed(0)}`);\n    }\n\n    // Create minimap controls on the right side\n    const minimapWidth = 40;\n    const minimapX = width + 160; // Position near the right border\n    \n    // Get full data range for minimap scale\n    const minimapPrices = [...data.map(d => d.value), ...liquidityData.map(d => d.price0)];\n    const dataMin = Math.min(...minimapPrices);\n    const dataMax = Math.max(...minimapPrices);\n    \n    // Create scale for full data range (for minimap) - full container height\n    const minimapYScale = d3.scaleLinear()\n      .domain([dataMin, dataMax])\n      .range([dimensions.height - margin.bottom, margin.top]);\n    \n    // Remove liquidity bars from minimap - not needed\n    \n    // Draw minimap background track (full container height)\n    g.append('rect')\n      .attr('class', 'minimap-track')\n      .attr('x', minimapX)\n      .attr('y', -margin.top)\n      .attr('width', 8)\n      .attr('height', dimensions.height) // Full container height\n      .attr('fill', '#333333')\n      .attr('rx', 4);\n    \n    // Calculate current viewport bounds based on zoom and pan using full data range\n    const fullDataRange = dataMax - dataMin;\n    const zoomedRange = fullDataRange / zoomLevel;\n    const currentCenter = dataMin + fullDataRange * 0.5 + panY * fullDataRange;\n    const viewportMinPrice = currentCenter - zoomedRange / 2;\n    const viewportMaxPrice = currentCenter + zoomedRange / 2;\n    \n    // Draw viewport indicator (shows current visible area)\n    const viewportHeight = minimapYScale(viewportMinPrice) - minimapYScale(viewportMaxPrice);\n    g.append('rect')\n      .attr('class', 'minimap-viewport')\n      .attr('x', minimapX - 2)\n      .attr('y', minimapYScale(viewportMaxPrice))\n      .attr('width', 12)\n      .attr('height', viewportHeight)\n      .attr('fill', '#ffffff')\n      .attr('fill-opacity', 0.2)\n      .attr('stroke', '#ffffff')\n      .attr('stroke-width', 1)\n      .attr('stroke-opacity', 0.4)\n      .attr('rx', 2);\n    \n    // Draw current range indicator (pink bar) with drag functionality\n    const currentRangeHeight = minimapYScale(minPrice) - minimapYScale(maxPrice);\n    const minimapRange = g.append('rect')\n      .attr('class', 'minimap-range')\n      .attr('x', minimapX)\n      .attr('y', minimapYScale(maxPrice))\n      .attr('width', 8)\n      .attr('height', currentRangeHeight)\n      .attr('fill', '#ff69b4')\n      .attr('rx', 4)\n      .attr('cursor', 'move');\n    \n    // Add drag behavior to the minimap range bar\n    minimapRange.call(d3.drag()\n      .on('start', function() {\n        setDragInProgress(true);\n      })\n      .on('drag', function(event) {\n        const newCenterY = Math.max(margin.top, Math.min(dimensions.height - margin.bottom, event.y));\n        const newCenterPrice = minimapYScale.invert(newCenterY);\n        const rangeSize = maxPrice - minPrice;\n        \n        // Calculate new min/max based on center position\n        let newMaxPrice = newCenterPrice + rangeSize / 2;\n        let newMinPrice = newCenterPrice - rangeSize / 2;\n        \n        // Keep within data bounds\n        if (newMaxPrice > dataMax) {\n          newMaxPrice = dataMax;\n          newMinPrice = dataMax - rangeSize;\n        }\n        if (newMinPrice < dataMin) {\n          newMinPrice = dataMin;\n          newMaxPrice = dataMin + rangeSize;\n        }\n        \n        // Update visual positions of handles and range bar\n        topHandle.attr('cy', minimapYScale(newMaxPrice));\n        bottomHandle.attr('cy', minimapYScale(newMinPrice));\n        d3.select(this)\n          .attr('y', minimapYScale(newMaxPrice))\n          .attr('height', minimapYScale(newMinPrice) - minimapYScale(newMaxPrice));\n        \n        // Update center handle position\n        const newCenterHandleY = (minimapYScale(newMaxPrice) + minimapYScale(newMinPrice)) / 2;\n        centerHandle.attr('cy', newCenterHandleY);\n        \n        // Calculate pan position based on where the range is positioned\n        const fullDataRange = dataMax - dataMin;\n        const rangeCenterInData = (newMaxPrice + newMinPrice) / 2;\n        const dataCenterPosition = (rangeCenterInData - dataMin) / fullDataRange - 0.5;\n        \n        // Update chart state to follow the minimap range\n        setChartState(prev => ({\n          ...prev,\n          minPrice: newMinPrice,\n          maxPrice: newMaxPrice,\n          panY: dataCenterPosition\n        }));\n      })\n      .on('end', function() {\n        setDragInProgress(false);\n      })\n    );\n    \n    // Draw drag handles\n    const handleRadius = 8;\n    \n    // Top handle (max price)\n    const topHandle = g.append('circle')\n      .attr('class', 'minimap-handle max-handle')\n      .attr('cx', minimapX + 4)\n      .attr('cy', minimapYScale(maxPrice))\n      .attr('r', handleRadius)\n      .attr('fill', '#ffffff')\n      .attr('stroke', '#ff69b4')\n      .attr('stroke-width', 3)\n      .attr('cursor', 'ns-resize');\n    \n    // Bottom handle (min price) \n    const bottomHandle = g.append('circle')\n      .attr('class', 'minimap-handle min-handle')\n      .attr('cx', minimapX + 4)\n      .attr('cy', minimapYScale(minPrice))\n      .attr('r', handleRadius)\n      .attr('fill', '#ffffff')\n      .attr('stroke', '#ff69b4')\n      .attr('stroke-width', 3)\n      .attr('cursor', 'ns-resize');\n    \n    // Center handle (for dragging entire range)\n    const centerY = (minimapYScale(maxPrice) + minimapYScale(minPrice)) / 2;\n    const centerHandle = g.append('circle')\n      .attr('class', 'minimap-handle center-handle')\n      .attr('cx', minimapX + 4)\n      .attr('cy', centerY)\n      .attr('r', 6)\n      .attr('fill', '#ff69b4')\n      .attr('cursor', 'move');\n    \n    // Add drag behavior to top handle (max price)\n    topHandle.call(d3.drag()\n      .on('start', function() {\n        setDragInProgress(true);\n      })\n      .on('drag', function(event) {\n        const newY = Math.max(margin.top, Math.min(dimensions.height - margin.bottom, event.y));\n        const newMaxPrice = minimapYScale.invert(newY);\n        \n        // Ensure max stays above min\n        const constrainedMaxPrice = Math.max(newMaxPrice, minPrice);\n        \n        // Update visual position\n        d3.select(this).attr('cy', minimapYScale(constrainedMaxPrice));\n        \n        // Update range bar\n        g.select('.minimap-range')\n          .attr('y', minimapYScale(constrainedMaxPrice))\n          .attr('height', minimapYScale(minPrice) - minimapYScale(constrainedMaxPrice));\n        \n        // Update center handle position\n        const newCenterY = (minimapYScale(constrainedMaxPrice) + minimapYScale(minPrice)) / 2;\n        centerHandle.attr('cy', newCenterY);\n        \n        // Update main chart price range elements\n        g.select('.price-range-bg')\n          .attr('y', yScale(constrainedMaxPrice))\n          .attr('height', yScale(minPrice) - yScale(constrainedMaxPrice));\n          \n        g.select('.max-line')\n          .attr('y1', yScale(constrainedMaxPrice))\n          .attr('y2', yScale(constrainedMaxPrice));\n          \n        g.select('.max-label')\n          .attr('y', yScale(constrainedMaxPrice) + 15)\n          .text(`Max: ${constrainedMaxPrice.toFixed(0)}`);\n      })\n      .on('end', function(event) {\n        const newY = Math.max(margin.top, Math.min(dimensions.height - margin.bottom, event.y));\n        let newMaxPrice = minimapYScale.invert(newY);\n        \n        // If dragged to top, set to data maximum\n        if (newY <= margin.top + 10) {\n          newMaxPrice = dataMax;\n        }\n        \n        // Ensure max stays above min\n        const constrainedMaxPrice = Math.max(newMaxPrice, minPrice);\n        setMaxPrice(constrainedMaxPrice);\n        setDragInProgress(false);\n      })\n    );\n    \n    // Add drag behavior to bottom handle (min price)\n    bottomHandle.call(d3.drag()\n      .on('start', function() {\n        setDragInProgress(true);\n      })\n      .on('drag', function(event) {\n        const newY = Math.max(margin.top, Math.min(dimensions.height - margin.bottom, event.y));\n        const newMinPrice = minimapYScale.invert(newY);\n        \n        // Ensure min stays below max\n        const constrainedMinPrice = Math.min(newMinPrice, maxPrice);\n        \n        // Update visual position\n        d3.select(this).attr('cy', minimapYScale(constrainedMinPrice));\n        \n        // Update range bar\n        g.select('.minimap-range')\n          .attr('y', minimapYScale(maxPrice))\n          .attr('height', minimapYScale(constrainedMinPrice) - minimapYScale(maxPrice));\n        \n        // Update center handle position\n        const newCenterY = (minimapYScale(maxPrice) + minimapYScale(constrainedMinPrice)) / 2;\n        centerHandle.attr('cy', newCenterY);\n        \n        // Update main chart price range elements\n        g.select('.price-range-bg')\n          .attr('y', yScale(maxPrice))\n          .attr('height', yScale(constrainedMinPrice) - yScale(maxPrice));\n          \n        g.select('.min-line')\n          .attr('y1', yScale(constrainedMinPrice))\n          .attr('y2', yScale(constrainedMinPrice));\n          \n        g.select('.min-label')\n          .attr('y', yScale(constrainedMinPrice) - 5)\n          .text(`Min: ${constrainedMinPrice.toFixed(0)}`);\n      })\n      .on('end', function(event) {\n        const newY = Math.max(margin.top, Math.min(dimensions.height - margin.bottom, event.y));\n        let newMinPrice = minimapYScale.invert(newY);\n        \n        // If dragged to bottom, set to data minimum\n        if (newY >= dimensions.height - margin.bottom - 10) {\n          newMinPrice = dataMin;\n        }\n        \n        // Ensure min stays below max\n        const constrainedMinPrice = Math.min(newMinPrice, maxPrice);\n        setMinPrice(constrainedMinPrice);\n        setDragInProgress(false);\n      })\n    );\n    \n    // Add drag behavior to center handle (drag entire range)\n    centerHandle.call(d3.drag()\n      .on('start', function() {\n        setDragInProgress(true);\n      })\n      .on('drag', function(event) {\n        const newCenterY = Math.max(margin.top, Math.min(dimensions.height - margin.bottom, event.y));\n        const newCenterPrice = minimapYScale.invert(newCenterY);\n        const rangeSize = maxPrice - minPrice;\n        \n        // Calculate new min/max based on center position\n        let newMaxPrice = newCenterPrice + rangeSize / 2;\n        let newMinPrice = newCenterPrice - rangeSize / 2;\n        \n        // Keep within data bounds\n        if (newMaxPrice > dataMax) {\n          newMaxPrice = dataMax;\n          newMinPrice = dataMax - rangeSize;\n        }\n        if (newMinPrice < dataMin) {\n          newMinPrice = dataMin;\n          newMaxPrice = dataMin + rangeSize;\n        }\n        \n        // Update visual positions\n        topHandle.attr('cy', minimapYScale(newMaxPrice));\n        bottomHandle.attr('cy', minimapYScale(newMinPrice));\n        d3.select(this).attr('cy', (minimapYScale(newMaxPrice) + minimapYScale(newMinPrice)) / 2);\n        \n        // Update range bar\n        g.select('.minimap-range')\n          .attr('y', minimapYScale(newMaxPrice))\n          .attr('height', minimapYScale(newMinPrice) - minimapYScale(newMaxPrice));\n          \n        // Update main chart price range elements\n        g.select('.price-range-bg')\n          .attr('y', yScale(newMaxPrice))\n          .attr('height', yScale(newMinPrice) - yScale(newMaxPrice));\n          \n        g.select('.min-line')\n          .attr('y1', yScale(newMinPrice))\n          .attr('y2', yScale(newMinPrice));\n          \n        g.select('.max-line')\n          .attr('y1', yScale(newMaxPrice))\n          .attr('y2', yScale(newMaxPrice));\n          \n        g.select('.min-label')\n          .attr('y', yScale(newMinPrice) - 5)\n          .text(`Min: ${newMinPrice.toFixed(0)}`);\n          \n        g.select('.max-label')\n          .attr('y', yScale(newMaxPrice) + 15)\n          .text(`Max: ${newMaxPrice.toFixed(0)}`);\n      })\n      .on('end', function(event) {\n        const newCenterY = Math.max(margin.top, Math.min(dimensions.height - margin.bottom, event.y));\n        const newCenterPrice = minimapYScale.invert(newCenterY);\n        const rangeSize = maxPrice - minPrice;\n        \n        // Calculate new min/max based on center position\n        let newMaxPrice = newCenterPrice + rangeSize / 2;\n        let newMinPrice = newCenterPrice - rangeSize / 2;\n        \n        // Keep within data bounds\n        if (newMaxPrice > dataMax) {\n          newMaxPrice = dataMax;\n          newMinPrice = dataMax - rangeSize;\n        }\n        if (newMinPrice < dataMin) {\n          newMinPrice = dataMin;\n          newMaxPrice = dataMin + rangeSize;\n        }\n        \n        setMinPrice(newMinPrice);\n        setMaxPrice(newMaxPrice);\n        setDragInProgress(false);\n      })\n    );\n\n\n    // Setup wheel event handler\n    const handleWheel = (event) => {\n      event.preventDefault();\n      event.stopPropagation();\n      \n      // Calculate current view bounds\n      const priceRange = priceExtent[1] - priceExtent[0];\n      const zoomedRange = priceRange / zoomLevel;\n      const currentCenter = priceExtent[0] + priceRange * 0.5 + panY * priceRange;\n      const currentMin = currentCenter - zoomedRange / 2;\n      const currentMax = currentCenter + zoomedRange / 2;\n      \n      // Natural scroll sensitivity based on current view range\n      const scrollSensitivity = zoomedRange / 600; // Faster scrolling for larger ranges\n      const rawScrollAmount = event.deltaY * scrollSensitivity;\n      \n      // Apply scroll (invert deltaY for natural direction)\n      const scrollAmount = rawScrollAmount / priceRange; // Normalize to pan range\n      \n      setChartState(prev => {\n        const newPanY = prev.panY - scrollAmount;\n        \n        // Dynamic bounds based on data and zoom level\n        const dataMin = Math.min(...allPrices);\n        const dataMax = Math.max(...allPrices);\n        const halfZoomedRange = zoomedRange / 2;\n        \n        // Calculate max pan bounds to keep view within data\n        const maxPanUp = (dataMax - halfZoomedRange - (priceExtent[0] + priceRange * 0.5)) / priceRange;\n        const maxPanDown = (dataMin + halfZoomedRange - (priceExtent[0] + priceRange * 0.5)) / priceRange;\n        \n        // Constrain to bounds\n        const constrainedPanY = Math.max(maxPanDown, Math.min(maxPanUp, newPanY));\n        \n        return { ...prev, panY: constrainedPanY };\n      });\n    };\n\n    // Add wheel event listener\n    const svgElement = svgRef.current;\n    if (svgElement) {\n      svgElement.addEventListener('wheel', handleWheel, { passive: false });\n      \n      // Add touch support for mobile\n      let touchStartY = null;\n      let lastTouchY = null;\n      let touchStartTime = null;\n      \n      const handleTouchStart = (event) => {\n        if (event.touches.length === 1) {\n          touchStartY = event.touches[0].clientY;\n          lastTouchY = touchStartY;\n          touchStartTime = Date.now();\n          event.preventDefault();\n        }\n      };\n      \n      const handleTouchMove = (event) => {\n        if (event.touches.length === 1 && touchStartY !== null) {\n          const currentTouchY = event.touches[0].clientY;\n          const deltaY = lastTouchY - currentTouchY; // Inverted for natural scrolling\n          \n          // Convert touch movement to pan\n          const allPrices = [\n            ...data.map(d => d.value),\n            ...liquidityData.map(d => d.price0)\n          ];\n          const priceExtent = d3.extent(allPrices);\n          const priceRange = priceExtent[1] - priceExtent[0];\n          const zoomedRange = priceRange / zoomLevel;\n          const touchSensitivity = zoomedRange / 400; // Scale based on current zoom\n          const scrollAmount = deltaY * touchSensitivity / priceRange;\n          \n          setChartState(prev => {\n            const newPanY = prev.panY + scrollAmount;\n            \n            // Apply bounds like in wheel handler\n            const halfZoomedRange = zoomedRange / 2;\n            const dataMin = Math.min(...allPrices);\n            const dataMax = Math.max(...allPrices);\n            const maxPanUp = (dataMax - halfZoomedRange - (priceExtent[0] + priceRange * 0.5)) / priceRange;\n            const maxPanDown = (dataMin + halfZoomedRange - (priceExtent[0] + priceRange * 0.5)) / priceRange;\n            const constrainedPanY = Math.max(maxPanDown, Math.min(maxPanUp, newPanY));\n            \n            return { ...prev, panY: constrainedPanY };\n          });\n          \n          lastTouchY = currentTouchY;\n          event.preventDefault();\n        }\n      };\n      \n      const handleTouchEnd = (event) => {\n        touchStartY = null;\n        lastTouchY = null;\n        touchStartTime = null;\n        event.preventDefault();\n      };\n      \n      svgElement.addEventListener('touchstart', handleTouchStart, { passive: false });\n      svgElement.addEventListener('touchmove', handleTouchMove, { passive: false });\n      svgElement.addEventListener('touchend', handleTouchEnd, { passive: false });\n      \n      return () => {\n        svgElement.removeEventListener('wheel', handleWheel);\n        svgElement.removeEventListener('touchstart', handleTouchStart);\n        svgElement.removeEventListener('touchmove', handleTouchMove);\n        svgElement.removeEventListener('touchend', handleTouchEnd);\n      };\n    }\n\n  }, [data, liquidityData, zoomLevel, panY, yScale, current, currentTick, minPrice, maxPrice, dimensions]);\n\n\n  // Set reasonable initial view on first load\n  useEffect(() => {\n    if (!initialViewSet && data && liquidityData && liquidityData.length > 0) {\n      const allPrices = [\n        ...data.map(d => d.value),\n        ...liquidityData.map(d => d.price0)\n      ];\n      const priceExtent = d3.extent(allPrices);\n      const priceRange = priceExtent[1] - priceExtent[0];\n      \n      // Filter out extreme outliers for initial view - focus on middle 20% of liquidity\n      const liquidityPrices = liquidityData.map(d => d.price0).sort((a, b) => a - b);\n      const percentile20 = liquidityPrices[Math.floor(liquidityPrices.length * 0.2)];\n      const percentile80 = liquidityPrices[Math.floor(liquidityPrices.length * 0.8)];\n      \n      // Set initial zoom to focus on the 20-80% range of liquidity with tighter view\n      const focusRange = percentile80 - percentile20;\n      const desiredZoom = Math.min(priceRange / (focusRange * 1), 25); // Show ~1x the focus range, max 25x zoom\n      \n      // Center the view on the current price (last data point)\n      const currentPrice = data[data.length - 1]?.value;\n      const originalCenter = priceExtent[0] + priceRange * 0.5;\n      const panOffset = (currentPrice - originalCenter) / priceRange;\n      \n      // Set default brush range - use a symmetrical range around current price\n      // Use 10% of the total price range for the brush range (tighter)\n      const brushRangeSize = priceRange * 0.1;\n      const defaultMinPrice = currentPrice - brushRangeSize / 2;\n      const defaultMaxPrice = currentPrice + brushRangeSize / 2;\n      \n      // Update both current state and default state\n      const newDefaultState = {\n        zoomLevel: desiredZoom,\n        panY: panOffset,\n        minPrice: defaultMinPrice,\n        maxPrice: defaultMaxPrice\n      };\n      \n      defaultState.current = newDefaultState;\n      setChartState(newDefaultState);\n      \n      setInitialViewSet(true);\n    }\n  }, [data, liquidityData, initialViewSet]);\n\n  const handleZoomIn = () => {\n    const targetZoom = Math.min(zoomLevel * 1.3, 50);\n    animateToState(targetZoom, panY, null, null, 300); // Faster for zoom buttons\n  };\n\n  const handleZoomOut = () => {\n    const targetZoom = Math.max(zoomLevel / 1.3, 0.1);\n    animateToState(targetZoom, panY, null, null, 300); // Faster for zoom buttons\n  };\n\n  // Smooth animation utility function with optional price range animation\n  const animateToState = (targetZoom, targetPan, targetMinPrice = null, targetMaxPrice = null, duration = 400) => {\n    const startZoom = zoomLevel;\n    const startPan = panY;\n    const startMinPrice = minPrice;\n    const startMaxPrice = maxPrice;\n    const startTime = Date.now();\n    \n    const animate = () => {\n      const elapsed = Date.now() - startTime;\n      const progress = Math.min(elapsed / duration, 1);\n      \n      // Modern easeOutQuart for snappy, smooth feel\n      const easeProgress = 1 - Math.pow(1 - progress, 4);\n      \n      // Interpolate zoom and pan values\n      const currentZoom = startZoom + (targetZoom - startZoom) * easeProgress;\n      const currentPan = startPan + (targetPan - startPan) * easeProgress;\n      \n      // Interpolate price range if targets provided\n      let currentMinPrice = startMinPrice;\n      let currentMaxPrice = startMaxPrice;\n      \n      if (targetMinPrice !== null && targetMaxPrice !== null) {\n        if (startMinPrice !== null && startMaxPrice !== null) {\n          currentMinPrice = startMinPrice + (targetMinPrice - startMinPrice) * easeProgress;\n          currentMaxPrice = startMaxPrice + (targetMaxPrice - startMaxPrice) * easeProgress;\n        } else {\n          // If no current range, just set the target at the end\n          if (progress === 1) {\n            currentMinPrice = targetMinPrice;\n            currentMaxPrice = targetMaxPrice;\n          }\n        }\n      }\n      \n      setChartState(prev => ({\n        ...prev,\n        zoomLevel: currentZoom,\n        panY: currentPan,\n        minPrice: currentMinPrice,\n        maxPrice: currentMaxPrice\n      }));\n      \n      if (progress < 1) {\n        requestAnimationFrame(animate);\n      }\n    };\n    \n    animate();\n  };\n\n  const handleResetZoom = () => {\n    // Animate reset of zoom, pan, and price range\n    animateToState(\n      defaultState.current.zoomLevel, \n      defaultState.current.panY,\n      defaultState.current.minPrice,\n      defaultState.current.maxPrice,\n      500 // Slightly longer for full reset\n    );\n  };\n\n  const handleCenterRange = () => {\n    if (minPrice === null || maxPrice === null || !data || !liquidityData) return;\n    \n    // Calculate all prices to get data bounds\n    const allPrices = [\n      ...data.map(d => d.value),\n      ...liquidityData.map(d => d.price0)\n    ];\n    const priceExtent = d3.extent(allPrices);\n    const totalPriceRange = priceExtent[1] - priceExtent[0];\n    \n    // Calculate range center and size\n    const rangeCenter = (minPrice + maxPrice) / 2;\n    const rangeSize = maxPrice - minPrice;\n    \n    // Calculate required pan to center the range\n    const originalCenter = priceExtent[0] + totalPriceRange * 0.5;\n    const targetPanY = (rangeCenter - originalCenter) / totalPriceRange;\n    \n    // Calculate required zoom to fit the range (with some padding)\n    const paddingFactor = 1.2; // 20% padding around the range\n    const visibleRangeNeeded = rangeSize * paddingFactor;\n    const currentVisibleRange = totalPriceRange / zoomLevel;\n    \n    let targetZoomLevel = zoomLevel;\n    if (visibleRangeNeeded > currentVisibleRange) {\n      // Need to zoom out to fit the range\n      targetZoomLevel = totalPriceRange / visibleRangeNeeded;\n      targetZoomLevel = Math.max(targetZoomLevel, 0.1); // Don't zoom out too far\n    }\n    \n    // Animate the transition with faster, smoother timing\n    animateToState(targetZoomLevel, targetPanY, null, null, 500);\n  };\n\n  return (\n    <div ref={containerRef} style={{ width: '100%' }}>\n      {/* Controls Panel - Outside Chart */}\n      <div style={{ \n        marginBottom: '10px',\n        background: '#f9f9f9',\n        padding: '12px',\n        borderRadius: '4px',\n        border: '1px solid #ddd',\n        display: 'flex',\n        gap: dimensions.width <= 768 ? '8px' : '20px',\n        alignItems: 'flex-start',\n        flexWrap: 'wrap',\n        fontSize: dimensions.width <= 768 ? '10px' : '12px',\n        padding: dimensions.width <= 768 ? '8px' : '12px'\n      }}>\n        {/* Zoom Controls */}\n        <div>\n          <div style={{ marginBottom: '4px', fontSize: '12px', fontWeight: 'bold' }}>\n            Zoom: {zoomLevel.toFixed(1)}x\n          </div>\n          <div style={{ display: 'flex', gap: '4px', marginBottom: '4px', flexWrap: 'wrap' }}>\n            <button onClick={handleZoomIn} style={{ \n              fontSize: dimensions.width <= 768 ? '10px' : '12px', \n              padding: dimensions.width <= 768 ? '6px 10px' : '4px 8px',\n              minHeight: dimensions.width <= 768 ? '32px' : 'auto'\n            }}>\n              Zoom In (+)\n            </button>\n            <button onClick={handleZoomOut} style={{ \n              fontSize: dimensions.width <= 768 ? '10px' : '12px', \n              padding: dimensions.width <= 768 ? '6px 10px' : '4px 8px',\n              minHeight: dimensions.width <= 768 ? '32px' : 'auto'\n            }}>\n              Zoom Out (-)\n            </button>\n            <button onClick={handleResetZoom} style={{ \n              fontSize: dimensions.width <= 768 ? '10px' : '12px', \n              padding: dimensions.width <= 768 ? '6px 10px' : '4px 8px',\n              minHeight: dimensions.width <= 768 ? '32px' : 'auto'\n            }}>\n              Reset\n            </button>\n            <button \n              onClick={handleCenterRange} \n              disabled={minPrice === null || maxPrice === null}\n              style={{ \n                fontSize: dimensions.width <= 768 ? '10px' : '12px', \n                padding: dimensions.width <= 768 ? '6px 10px' : '4px 8px',\n                minHeight: dimensions.width <= 768 ? '32px' : 'auto',\n                opacity: minPrice === null || maxPrice === null ? 0.5 : 1,\n                cursor: minPrice === null || maxPrice === null ? 'not-allowed' : 'pointer'\n              }}\n            >\n              {dimensions.width <= 768 ? 'Center' : 'Center Range'}\n            </button>\n          </div>\n          <div style={{ fontSize: '10px', color: '#666', textAlign: 'center' }}>\n            Scroll to pan\n          </div>\n        </div>\n\n        {/* Price Range Controls */}\n        <div>\n          <div style={{ marginBottom: '4px', fontSize: '12px', fontWeight: 'bold' }}>\n            Price Range\n          </div>\n          <div style={{ display: 'flex', gap: '8px', alignItems: 'center', flexWrap: 'wrap' }}>\n            <div style={{ display: 'flex', alignItems: 'center', gap: '4px' }}>\n              <label style={{ fontSize: '11px', minWidth: '30px' }}>Min:</label>\n              <input\n                type=\"number\"\n                value={minPrice || ''}\n                onChange={(e) => setMinPrice(e.target.value ? parseFloat(e.target.value) : null)}\n                style={{ \n                  fontSize: dimensions.width <= 768 ? '10px' : '11px', \n                  padding: dimensions.width <= 768 ? '6px 8px' : '4px 6px', \n                  border: '1px solid #ccc',\n                  borderRadius: '4px',\n                  width: dimensions.width <= 768 ? '70px' : '90px',\n                  minHeight: dimensions.width <= 768 ? '32px' : 'auto'\n                }}\n                step=\"0.01\"\n              />\n            </div>\n            <div style={{ display: 'flex', alignItems: 'center', gap: '4px' }}>\n              <label style={{ fontSize: '11px', minWidth: '30px' }}>Max:</label>\n              <input\n                type=\"number\"\n                value={maxPrice || ''}\n                onChange={(e) => setMaxPrice(e.target.value ? parseFloat(e.target.value) : null)}\n                style={{ \n                  fontSize: dimensions.width <= 768 ? '10px' : '11px', \n                  padding: dimensions.width <= 768 ? '6px 8px' : '4px 6px', \n                  border: '1px solid #ccc',\n                  borderRadius: '4px',\n                  width: dimensions.width <= 768 ? '70px' : '90px',\n                  minHeight: dimensions.width <= 768 ? '32px' : 'auto'\n                }}\n                step=\"0.01\"\n              />\n            </div>\n            <button \n              onClick={() => { setMinPrice(null); setMaxPrice(null); }}\n              style={{ \n                fontSize: dimensions.width <= 768 ? '10px' : '11px', \n                padding: dimensions.width <= 768 ? '6px 10px' : '4px 8px', \n                backgroundColor: '#fff',\n                border: '1px solid #ccc',\n                borderRadius: '4px',\n                cursor: 'pointer',\n                minHeight: dimensions.width <= 768 ? '32px' : 'auto'\n              }}\n            >\n              Clear Range\n            </button>\n          </div>\n        </div>\n      </div>\n\n      <div style={{ \n        position: 'relative',\n        width: '100%',\n        overflow: 'hidden'\n      }}>\n        <svg\n          ref={svgRef}\n          width={dimensions.width}\n          height={dimensions.height}\n          style={{ \n            border: '1px solid #ccc',\n            display: 'block',\n            maxWidth: '100%',\n            touchAction: 'manipulation' // Optimizes for touch interactions\n          }}\n        >\n        </svg>\n      </div>\n    </div>\n  );\n};\n\nexport default D3Chart;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}