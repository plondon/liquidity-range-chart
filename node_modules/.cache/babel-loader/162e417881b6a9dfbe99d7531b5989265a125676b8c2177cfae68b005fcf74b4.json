{"ast":null,"code":"var _jsxFileName = \"/Users/phil.london/Projects/tradingview-chart-mvp/src/D3Chart.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState, useMemo } from 'react';\nimport * as d3 from 'd3';\nimport PriceRange from './PriceRange';\n\n// Cache for price data lookups\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst priceDataCache = new Map();\nfunction findClosestElementBinarySearch(data, target) {\n  var _data$right, _data$left;\n  let left = 0;\n  let right = data.length - 1;\n  if (!target) {\n    return null;\n  }\n  if (priceDataCache.has(target.toString())) {\n    return priceDataCache.get(target.toString());\n  }\n  while (left <= right) {\n    const mid = Math.floor((left + right) / 2);\n    if (data[mid].price0 === target) {\n      priceDataCache.set(target.toString(), data[mid]);\n      return data[mid];\n    } else if (data[mid].price0 < target) {\n      left = mid + 1;\n    } else {\n      right = mid - 1;\n    }\n  }\n\n  // After binary search, left and right are the closest bounds\n  const closest = (_data$right = data[right]) !== null && _data$right !== void 0 ? _data$right : {\n    price0: Infinity\n  }; // Handle bounds\n  const nextClosest = (_data$left = data[left]) !== null && _data$left !== void 0 ? _data$left : {\n    price0: Infinity\n  };\n\n  // Return the element with the closest `price0`\n  const closestElement = Math.abs(closest.price0 - target) <= Math.abs(nextClosest.price0 - target) ? closest : nextClosest;\n  priceDataCache.set(target.toString(), closestElement);\n  return closestElement;\n}\nfunction scaleToInteger(a, precision = 18) {\n  const scaleFactor = Math.pow(10, precision);\n  return Math.round(a * scaleFactor);\n}\nconst D3Chart = ({\n  data,\n  liquidityData\n}) => {\n  _s();\n  const svgRef = useRef();\n  const [initialViewSet, setInitialViewSet] = useState(false);\n  const [dragInProgress, setDragInProgress] = useState(false);\n\n  // Default state object\n  const defaultState = useRef({\n    zoomLevel: 1,\n    panY: 0,\n    minPrice: null,\n    maxPrice: null\n  });\n\n  // Main state object\n  const [chartState, setChartState] = useState({\n    zoomLevel: 1,\n    panY: 0,\n    minPrice: null,\n    maxPrice: null\n  });\n\n  // Destructure for easier access\n  const {\n    zoomLevel,\n    panY,\n    minPrice,\n    maxPrice\n  } = chartState;\n\n  // Calculate current price from the last entry\n  const current = useMemo(() => {\n    var _data;\n    return data && data.length > 0 ? (_data = data[data.length - 1]) === null || _data === void 0 ? void 0 : _data.value : null;\n  }, [data]);\n\n  // Calculate currentTick based on current price\n  const currentTick = useMemo(() => {\n    var _findClosestElementBi;\n    if (!current || !liquidityData) return null;\n    return (_findClosestElementBi = findClosestElementBinarySearch(liquidityData, current)) === null || _findClosestElementBi === void 0 ? void 0 : _findClosestElementBi.tick;\n  }, [current, liquidityData]);\n\n  // Brush extent as [min, max] array\n  const brushExtent = useMemo(() => {\n    if (minPrice !== null && maxPrice !== null) {\n      return [minPrice, maxPrice];\n    }\n    return null;\n  }, [minPrice, maxPrice]);\n  const setBrushExtent = extent => {\n    if (extent && extent.length === 2) {\n      setChartState(prev => ({\n        ...prev,\n        minPrice: extent[0],\n        maxPrice: extent[1]\n      }));\n    } else {\n      setChartState(prev => ({\n        ...prev,\n        minPrice: null,\n        maxPrice: null\n      }));\n    }\n  };\n\n  // Helper functions for updating individual state properties\n  const setMinPrice = price => setChartState(prev => ({\n    ...prev,\n    minPrice: price\n  }));\n  const setMaxPrice = price => setChartState(prev => ({\n    ...prev,\n    maxPrice: price\n  }));\n  const setZoomLevel = zoom => setChartState(prev => ({\n    ...prev,\n    zoomLevel: zoom\n  }));\n  const setPanY = pan => setChartState(prev => ({\n    ...prev,\n    panY: pan\n  }));\n\n  // Calculate yScale outside useEffect so it's available for Brush component\n  const yScale = useMemo(() => {\n    if (!data || !liquidityData) return null;\n    const allPrices = [...data.map(d => d.value), ...liquidityData.map(d => d.price0)];\n    const priceExtent = d3.extent(allPrices);\n    const priceRange = priceExtent[1] - priceExtent[0];\n    const zoomedRange = priceRange / zoomLevel;\n    const centerPrice = priceExtent[0] + priceRange * 0.5 + panY * priceRange;\n    return d3.scaleLinear().domain([centerPrice - zoomedRange / 2, centerPrice + zoomedRange / 2]).range([400 - 20 - 50, 0]); // [height, 0] for proper D3 coordinate system\n  }, [data, liquidityData, zoomLevel, panY]);\n  useEffect(() => {\n    if (!data || !liquidityData || !yScale) return;\n    const svg = d3.select(svgRef.current);\n    svg.selectAll(\"g\").remove(); // Only remove D3-created elements, not React elements\n\n    const margin = {\n      top: 20,\n      right: 120,\n      bottom: 50,\n      left: 80\n    };\n    const width = 800 - margin.left - margin.right;\n    const height = 400 - margin.top - margin.bottom;\n    const g = svg.append(\"g\").attr(\"transform\", `translate(${margin.left},${margin.top})`);\n\n    // Convert timestamps to dates for price data\n    const priceData = data.map(d => ({\n      date: new Date(d.time * 1000),\n      value: d.value\n    }));\n\n    // Unified price scale encompassing both price data and liquidity data\n    const allPrices = [...priceData.map(d => d.value), ...liquidityData.map(d => d.price0)];\n    const priceExtent = d3.extent(allPrices);\n\n    // Scales for price line chart\n    const xScale = d3.scaleTime().domain(d3.extent(priceData, d => d.date)).range([0, width]);\n\n    // Line generator for price\n    const line = d3.line().x(d => xScale(d.date)).y(d => yScale(d.value)).curve(d3.curveMonotoneX);\n\n    // Draw price line with conditional coloring\n    if (minPrice !== null && maxPrice !== null) {\n      // Draw segments with different colors based on price range\n      for (let i = 0; i < priceData.length - 1; i++) {\n        const currentPoint = priceData[i];\n        const nextPoint = priceData[i + 1];\n\n        // Check if current point is within range\n        const isInRange = currentPoint.value >= minPrice && currentPoint.value <= maxPrice;\n        const color = isInRange ? \"#d63384\" : \"#888888\"; // Dark pink or grey\n\n        // Draw line segment between current and next point\n        g.append(\"path\").datum([currentPoint, nextPoint]).attr(\"fill\", \"none\").attr(\"stroke\", color).attr(\"stroke-width\", 2).attr(\"d\", line).attr(\"class\", \"price-segment\");\n      }\n    } else {\n      // Draw single blue line when no range is selected\n      g.append(\"path\").datum(priceData).attr(\"fill\", \"none\").attr(\"stroke\", \"#2196F3\").attr(\"stroke-width\", 2).attr(\"d\", line).attr(\"class\", \"price-line\");\n    }\n\n    // Remove X and left Y axes completely\n\n    // Right side liquidity chart - inspired by Uniswap's approach\n    const liquidityWidth = margin.right - 60; // Make room for 4-character price labels\n\n    // Use the same unified y scale for liquidity positioning\n    const liquidityYScale = yScale;\n\n    // Calculate current visible price range for filtering liquidity data\n    const currentPriceRange = priceExtent[1] - priceExtent[0];\n    const currentZoomedRange = currentPriceRange / zoomLevel;\n    const currentCenterPrice = priceExtent[0] + currentPriceRange * 0.5 + panY * currentPriceRange;\n    const visibleMinPrice = currentCenterPrice - currentZoomedRange / 2;\n    const visibleMaxPrice = currentCenterPrice + currentZoomedRange / 2;\n\n    // Filter liquidity data to only entries within visible price range\n    const visibleLiquidityData = liquidityData.filter(d => d.price0 >= visibleMinPrice && d.price0 <= visibleMaxPrice);\n\n    // X scale for liquidity amounts - scale based only on visible entries\n    const maxVisibleLiquidity = visibleLiquidityData.length > 0 ? d3.max(visibleLiquidityData, d => d.activeLiquidity) : d3.max(liquidityData, d => d.activeLiquidity); // Fallback if no visible data\n\n    const liquidityXScale = d3.scaleLinear().domain([0, maxVisibleLiquidity]).range([0, liquidityWidth]);\n\n    // Draw very thin grey horizontal liquidity bars using data join for better performance\n    const bars = g.selectAll(\".liquidity-bar\").data(liquidityData, d => d.price0); // Use price as key for consistent updates\n\n    // Remove bars that are no longer needed\n    bars.exit().transition().duration(150).style(\"opacity\", 0).remove();\n\n    // Add new bars\n    const enterBars = bars.enter().append(\"rect\").attr(\"class\", \"liquidity-bar\").attr(\"height\", 1).attr(\"opacity\", 0.7).attr(\"x\", d => width + 10 + liquidityWidth - liquidityXScale(d.activeLiquidity)).attr(\"y\", d => liquidityYScale(d.price0) - 0.5).attr(\"width\", d => liquidityXScale(d.activeLiquidity));\n\n    // Update existing bars with smooth transitions and conditional coloring\n    bars.merge(enterBars).transition().duration(100).attr(\"x\", d => width + 10 + liquidityWidth - liquidityXScale(d.activeLiquidity)).attr(\"y\", d => liquidityYScale(d.price0) - 0.5).attr(\"width\", d => liquidityXScale(d.activeLiquidity)).attr(\"fill\", d => {\n      // Check if bar is within the price range - ensure proper number comparison\n      const price = parseFloat(d.price0);\n      const min = parseFloat(minPrice);\n      const max = parseFloat(maxPrice);\n      if (minPrice !== null && maxPrice !== null && price >= min && price <= max) {\n        return \"#d63384\"; // Dark pink for bars within range\n      }\n      return \"#888888\"; // Default grey\n    });\n\n    // Remove right Y-axis - keep only the price labels\n\n    // Add price labels in the reserved space to the right using data join\n    const labelData = liquidityData.filter((d, i) => i % 10 === 0); // Show every 10th label to avoid clutter\n    const labels = g.selectAll(\".liquidity-price-label\").data(labelData, d => d.price0); // Use price as key\n\n    // Remove labels that are no longer needed\n    labels.exit().transition().duration(150).style(\"opacity\", 0).remove();\n\n    // Add new labels\n    const enterLabels = labels.enter().append(\"text\").attr(\"class\", \"liquidity-price-label\").attr(\"font-size\", \"8px\").attr(\"fill\", \"#666\").attr(\"text-anchor\", \"start\").attr(\"dy\", \"0.35em\").attr(\"opacity\", 1).attr(\"x\", width + liquidityWidth + 15) // Position in reserved label space\n    .attr(\"y\", d => liquidityYScale(d.price0)).text(d => d.price0.toFixed(0));\n\n    // Update existing labels with smooth transitions\n    labels.merge(enterLabels).transition().duration(100).attr(\"x\", width + liquidityWidth + 15).attr(\"y\", d => liquidityYScale(d.price0));\n\n    // Draw price range visualization directly in the main chart\n    if (minPrice !== null && maxPrice !== null) {\n      // Remove existing range elements\n      g.selectAll(\".price-range-element\").remove();\n\n      // Draw transparent pink background between min and max - extend to cover full chart area\n      g.append('rect').attr('class', 'price-range-element price-range-bg').attr('x', -80) // Extend left to cover the margin area\n      .attr('y', yScale(maxPrice)).attr('width', 800) // Cover the entire SVG width\n      .attr('height', yScale(minPrice) - yScale(maxPrice)).attr('fill', '#ff69b4').attr('fill-opacity', 0.15).attr('cursor', 'move').call(d3.drag().on('start', function () {\n        setDragInProgress(true);\n      }).on('drag', function (event) {\n        const newY = Math.max(0, Math.min(height, event.y));\n        const draggedPrice = yScale.invert(newY);\n        const rangeSize = maxPrice - minPrice;\n\n        // Calculate new min/max based on dragged center position\n        const newMaxPrice = draggedPrice + rangeSize / 2;\n        const newMinPrice = draggedPrice - rangeSize / 2;\n\n        // Get data bounds to prevent dragging outside chart\n        const allPrices = [...data.map(d => d.value), ...liquidityData.map(d => d.price0)];\n        const dataMin = Math.min(...allPrices);\n        const dataMax = Math.max(...allPrices);\n\n        // Only update if range stays within data bounds\n        if (newMinPrice >= dataMin && newMaxPrice <= dataMax) {\n          // Update background position\n          const newMaxY = yScale(newMaxPrice);\n          const newMinY = yScale(newMinPrice);\n          d3.select(this).attr('y', newMaxY).attr('height', newMinY - newMaxY);\n\n          // Update min line\n          g.select('.min-line').attr('y1', newMinY).attr('y2', newMinY);\n\n          // Update max line\n          g.select('.max-line').attr('y1', newMaxY).attr('y2', newMaxY);\n\n          // Update labels\n          g.select('.min-label').attr('y', newMinY - 5).text(`Min: ${newMinPrice.toFixed(0)}`);\n          g.select('.max-label').attr('y', newMaxY + 15).text(`Max: ${newMaxPrice.toFixed(0)}`);\n\n          // Update liquidity bar colors\n          g.selectAll('.liquidity-bar').attr('fill', d => {\n            const price = parseFloat(d.price0);\n            if (price >= newMinPrice && price <= newMaxPrice) {\n              return \"#d63384\";\n            }\n            return \"#888888\";\n          });\n\n          // Update price line segment colors\n          g.selectAll('.price-segment').attr('stroke', function () {\n            const datum = d3.select(this).datum();\n            if (datum && datum.length > 0) {\n              const value = datum[0].value;\n              return value >= newMinPrice && value <= newMaxPrice ? \"#d63384\" : \"#888888\";\n            }\n            return \"#888888\";\n          });\n        }\n      }).on('end', function (event) {\n        const newY = Math.max(0, Math.min(height, event.y));\n        const draggedPrice = yScale.invert(newY);\n        const rangeSize = maxPrice - minPrice;\n\n        // Calculate new min/max based on dragged center position\n        const newMaxPrice = draggedPrice + rangeSize / 2;\n        const newMinPrice = draggedPrice - rangeSize / 2;\n\n        // Get data bounds\n        const allPrices = [...data.map(d => d.value), ...liquidityData.map(d => d.price0)];\n        const dataMin = Math.min(...allPrices);\n        const dataMax = Math.max(...allPrices);\n\n        // Only update state if range stays within data bounds\n        if (newMinPrice >= dataMin && newMaxPrice <= dataMax) {\n          setMinPrice(newMinPrice);\n          setMaxPrice(newMaxPrice);\n        }\n        setDragInProgress(false);\n      }));\n\n      // Draw min price line (solid) with drag behavior\n      g.append('line').attr('class', 'price-range-element min-line').attr('x1', -80) // Start from left margin\n      .attr('x2', 720) // Extend to right edge (800 - 80 = 720)\n      .attr('y1', yScale(minPrice)).attr('y2', yScale(minPrice)).attr('stroke', '#ff6b6b').attr('stroke-width', 4).attr('opacity', 0.9).attr('cursor', 'ns-resize').call(d3.drag().on('start', function () {\n        setDragInProgress(true);\n      }).on('drag', function (event) {\n        const newY = Math.max(0, Math.min(height, event.y));\n        const newPrice = yScale.invert(newY);\n\n        // Update visual position immediately\n        d3.select(this).attr('y1', newY).attr('y2', newY);\n\n        // Determine which line represents min and max during drag\n        const currentMaxY = yScale(maxPrice);\n        let draggedMinPrice = newPrice;\n        let draggedMaxPrice = maxPrice;\n\n        // Handle visual swapping if lines cross\n        if (newY < currentMaxY) {\n          // Min line dragged above max line - swap visually\n          draggedMinPrice = maxPrice;\n          draggedMaxPrice = newPrice;\n\n          // Update max line color to min color and vice versa\n          g.select('.max-line').attr('stroke', '#ff6b6b'); // Min color\n          d3.select(this).attr('stroke', '#4ecdc4'); // Max color\n        } else {\n          // Lines in normal order - restore original colors\n          g.select('.max-line').attr('stroke', '#4ecdc4'); // Max color\n          d3.select(this).attr('stroke', '#ff6b6b'); // Min color\n        }\n\n        // Update background\n        g.select('.price-range-bg').attr('y', yScale(draggedMaxPrice)).attr('height', yScale(draggedMinPrice) - yScale(draggedMaxPrice));\n\n        // Update labels\n        g.select('.min-label').attr('y', yScale(draggedMinPrice) - 5).text(`Min: ${draggedMinPrice.toFixed(0)}`);\n        g.select('.max-label').attr('y', yScale(draggedMaxPrice) + 15).text(`Max: ${draggedMaxPrice.toFixed(0)}`);\n\n        // Update liquidity bar colors\n        g.selectAll('.liquidity-bar').attr('fill', d => {\n          const price = parseFloat(d.price0);\n          if (price >= draggedMinPrice && price <= draggedMaxPrice) {\n            return \"#d63384\";\n          }\n          return \"#888888\";\n        });\n\n        // Update price line segment colors\n        g.selectAll('.price-segment').attr('stroke', function () {\n          const datum = d3.select(this).datum();\n          if (datum && datum.length > 0) {\n            const value = datum[0].value;\n            return value >= draggedMinPrice && value <= draggedMaxPrice ? \"#d63384\" : \"#888888\";\n          }\n          return \"#888888\";\n        });\n      }).on('end', function (event) {\n        const newY = Math.max(0, Math.min(height, event.y));\n        const newPrice = yScale.invert(newY);\n\n        // Handle final state update with proper min/max ordering\n        if (newPrice > maxPrice) {\n          // Min dragged above max - swap them in state\n          setMinPrice(maxPrice);\n          setMaxPrice(newPrice);\n        } else {\n          // Normal case - just update min\n          setMinPrice(newPrice);\n        }\n        setDragInProgress(false);\n      }));\n\n      // Draw max price line (solid) with drag behavior\n      g.append('line').attr('class', 'price-range-element max-line').attr('x1', -80) // Start from left margin\n      .attr('x2', 720) // Extend to right edge (800 - 80 = 720)\n      .attr('y1', yScale(maxPrice)).attr('y2', yScale(maxPrice)).attr('stroke', '#4ecdc4').attr('stroke-width', 4).attr('opacity', 0.9).attr('cursor', 'ns-resize').call(d3.drag().on('start', function () {\n        setDragInProgress(true);\n      }).on('drag', function (event) {\n        const newY = Math.max(0, Math.min(height, event.y));\n        const newPrice = yScale.invert(newY);\n\n        // Update visual position immediately\n        d3.select(this).attr('y1', newY).attr('y2', newY);\n\n        // Determine which line represents min and max during drag\n        const currentMinY = yScale(minPrice);\n        let draggedMinPrice = minPrice;\n        let draggedMaxPrice = newPrice;\n\n        // Handle visual swapping if lines cross\n        if (newY > currentMinY) {\n          // Max line dragged below min line - swap visually\n          draggedMinPrice = newPrice;\n          draggedMaxPrice = minPrice;\n\n          // Update min line color to max color and vice versa\n          g.select('.min-line').attr('stroke', '#4ecdc4'); // Max color\n          d3.select(this).attr('stroke', '#ff6b6b'); // Min color\n        } else {\n          // Lines in normal order - restore original colors\n          g.select('.min-line').attr('stroke', '#ff6b6b'); // Min color\n          d3.select(this).attr('stroke', '#4ecdc4'); // Max color\n        }\n\n        // Update background\n        g.select('.price-range-bg').attr('y', yScale(draggedMaxPrice)).attr('height', yScale(draggedMinPrice) - yScale(draggedMaxPrice));\n\n        // Update labels\n        g.select('.min-label').attr('y', yScale(draggedMinPrice) - 5).text(`Min: ${draggedMinPrice.toFixed(0)}`);\n        g.select('.max-label').attr('y', yScale(draggedMaxPrice) + 15).text(`Max: ${draggedMaxPrice.toFixed(0)}`);\n\n        // Update liquidity bar colors\n        g.selectAll('.liquidity-bar').attr('fill', d => {\n          const price = parseFloat(d.price0);\n          if (price >= draggedMinPrice && price <= draggedMaxPrice) {\n            return \"#d63384\";\n          }\n          return \"#888888\";\n        });\n\n        // Update price line segment colors\n        g.selectAll('.price-segment').attr('stroke', function () {\n          const datum = d3.select(this).datum();\n          if (datum && datum.length > 0) {\n            const value = datum[0].value;\n            return value >= draggedMinPrice && value <= draggedMaxPrice ? \"#d63384\" : \"#888888\";\n          }\n          return \"#888888\";\n        });\n      }).on('end', function (event) {\n        const newY = Math.max(0, Math.min(height, event.y));\n        const newPrice = yScale.invert(newY);\n\n        // Handle final state update with proper min/max ordering\n        if (newPrice < minPrice) {\n          // Max dragged below min - swap them in state\n          setMaxPrice(minPrice);\n          setMinPrice(newPrice);\n        } else {\n          // Normal case - just update max\n          setMaxPrice(newPrice);\n        }\n        setDragInProgress(false);\n      }));\n\n      // Add min price label\n      g.append('text').attr('class', 'price-range-element min-label').attr('x', 5).attr('y', yScale(minPrice) - 5).attr('font-size', '10px').attr('fill', '#ff6b6b').attr('font-weight', 'bold').text(`Min: ${minPrice.toFixed(0)}`);\n\n      // Add max price label\n      g.append('text').attr('class', 'price-range-element max-label').attr('x', 5).attr('y', yScale(maxPrice) + 15).attr('font-size', '10px').attr('fill', '#4ecdc4').attr('font-weight', 'bold').text(`Max: ${maxPrice.toFixed(0)}`);\n    }\n\n    // Draw current price line (dotted) if current price exists\n    if (current !== null) {\n      // Remove existing current price line\n      g.selectAll('.current-price-line').remove();\n      g.selectAll('.current-price-label').remove();\n\n      // Draw dotted line across the entire chart for current price\n      g.append('line').attr('class', 'current-price-line').attr('x1', -80) // Start from left margin\n      .attr('x2', 720) // Extend to right edge (800 - 80 = 720)\n      .attr('y1', yScale(current)).attr('y2', yScale(current)).attr('stroke', '#666666') // Grey color\n      .attr('stroke-width', 2).attr('stroke-dasharray', '5,5') // Dotted line pattern\n      .attr('opacity', 0.8);\n\n      // Add current price label on the left like min/max\n      g.append('text').attr('class', 'current-price-label').attr('x', 5) // Position on the left side like min/max\n      .attr('y', yScale(current) - 5).attr('font-size', '10px').attr('fill', '#666666') // Grey color\n      .attr('font-weight', 'bold').text(`Current: ${current.toFixed(0)}`);\n    }\n\n    // Setup wheel event handler\n    const handleWheel = event => {\n      event.preventDefault();\n      event.stopPropagation();\n\n      // Calculate current view bounds\n      const priceRange = priceExtent[1] - priceExtent[0];\n      const zoomedRange = priceRange / zoomLevel;\n      const currentCenter = priceExtent[0] + priceRange * 0.5 + panY * priceRange;\n      const currentMin = currentCenter - zoomedRange / 2;\n      const currentMax = currentCenter + zoomedRange / 2;\n\n      // Natural scroll sensitivity based on current view range\n      const scrollSensitivity = zoomedRange / 600; // Faster scrolling for larger ranges\n      const rawScrollAmount = event.deltaY * scrollSensitivity;\n\n      // Apply scroll (invert deltaY for natural direction)\n      const scrollAmount = rawScrollAmount / priceRange; // Normalize to pan range\n\n      setChartState(prev => {\n        const newPanY = prev.panY - scrollAmount;\n\n        // Dynamic bounds based on data and zoom level\n        const dataMin = Math.min(...allPrices);\n        const dataMax = Math.max(...allPrices);\n        const halfZoomedRange = zoomedRange / 2;\n\n        // Calculate max pan bounds to keep view within data\n        const maxPanUp = (dataMax - halfZoomedRange - (priceExtent[0] + priceRange * 0.5)) / priceRange;\n        const maxPanDown = (dataMin + halfZoomedRange - (priceExtent[0] + priceRange * 0.5)) / priceRange;\n\n        // Constrain to bounds\n        const constrainedPanY = Math.max(maxPanDown, Math.min(maxPanUp, newPanY));\n        return {\n          ...prev,\n          panY: constrainedPanY\n        };\n      });\n    };\n\n    // Add wheel event listener\n    const svgElement = svgRef.current;\n    if (svgElement) {\n      svgElement.addEventListener('wheel', handleWheel, {\n        passive: false\n      });\n      return () => svgElement.removeEventListener('wheel', handleWheel);\n    }\n  }, [data, liquidityData, zoomLevel, panY, yScale, minPrice, maxPrice, current, currentTick]);\n\n  // Set reasonable initial view on first load\n  useEffect(() => {\n    if (!initialViewSet && data && liquidityData && liquidityData.length > 0) {\n      var _data2;\n      const allPrices = [...data.map(d => d.value), ...liquidityData.map(d => d.price0)];\n      const priceExtent = d3.extent(allPrices);\n      const priceRange = priceExtent[1] - priceExtent[0];\n\n      // Filter out extreme outliers for initial view - focus on middle 20% of liquidity\n      const liquidityPrices = liquidityData.map(d => d.price0).sort((a, b) => a - b);\n      const percentile20 = liquidityPrices[Math.floor(liquidityPrices.length * 0.2)];\n      const percentile80 = liquidityPrices[Math.floor(liquidityPrices.length * 0.8)];\n\n      // Set initial zoom to focus on the 20-80% range of liquidity with tighter view\n      const focusRange = percentile80 - percentile20;\n      const desiredZoom = Math.min(priceRange / (focusRange * 1), 25); // Show ~1x the focus range, max 25x zoom\n\n      // Center the view on the current price (last data point)\n      const currentPrice = (_data2 = data[data.length - 1]) === null || _data2 === void 0 ? void 0 : _data2.value;\n      const originalCenter = priceExtent[0] + priceRange * 0.5;\n      const panOffset = (currentPrice - originalCenter) / priceRange;\n\n      // Set default brush range - use a symmetrical range around current price\n      // Use 10% of the total price range for the brush range (tighter)\n      const brushRangeSize = priceRange * 0.1;\n      const defaultMinPrice = currentPrice - brushRangeSize / 2;\n      const defaultMaxPrice = currentPrice + brushRangeSize / 2;\n\n      // Update both current state and default state\n      const newDefaultState = {\n        zoomLevel: desiredZoom,\n        panY: panOffset,\n        minPrice: defaultMinPrice,\n        maxPrice: defaultMaxPrice\n      };\n      defaultState.current = newDefaultState;\n      setChartState(newDefaultState);\n      setInitialViewSet(true);\n    }\n  }, [data, liquidityData, initialViewSet]);\n  const handleZoomIn = () => {\n    setChartState(prev => ({\n      ...prev,\n      zoomLevel: Math.min(prev.zoomLevel * 1.3, 50)\n    }));\n  };\n  const handleZoomOut = () => {\n    setChartState(prev => ({\n      ...prev,\n      zoomLevel: Math.max(prev.zoomLevel / 1.3, 0.1)\n    }));\n  };\n  const handleResetZoom = () => {\n    setChartState(defaultState.current);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginBottom: '10px',\n        background: '#f9f9f9',\n        padding: '12px',\n        borderRadius: '4px',\n        border: '1px solid #ddd',\n        display: 'flex',\n        gap: '20px',\n        alignItems: 'flex-start',\n        flexWrap: 'wrap'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            marginBottom: '4px',\n            fontSize: '12px',\n            fontWeight: 'bold'\n          },\n          children: [\"Zoom: \", zoomLevel.toFixed(1), \"x\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 794,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            display: 'flex',\n            gap: '4px',\n            marginBottom: '4px'\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: handleZoomIn,\n            style: {\n              fontSize: '12px',\n              padding: '4px 8px'\n            },\n            children: \"Zoom In (+)\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 798,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: handleZoomOut,\n            style: {\n              fontSize: '12px',\n              padding: '4px 8px'\n            },\n            children: \"Zoom Out (-)\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 801,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: handleResetZoom,\n            style: {\n              fontSize: '12px',\n              padding: '4px 8px'\n            },\n            children: \"Reset\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 804,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 797,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            fontSize: '10px',\n            color: '#666',\n            textAlign: 'center'\n          },\n          children: \"Scroll to pan\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 808,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 793,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            marginBottom: '4px',\n            fontSize: '12px',\n            fontWeight: 'bold'\n          },\n          children: \"Price Range\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 815,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            display: 'flex',\n            gap: '8px',\n            alignItems: 'center',\n            flexWrap: 'wrap'\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              display: 'flex',\n              alignItems: 'center',\n              gap: '4px'\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              style: {\n                fontSize: '11px',\n                minWidth: '30px'\n              },\n              children: \"Min:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 820,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"number\",\n              value: minPrice || '',\n              onChange: e => setMinPrice(e.target.value ? parseFloat(e.target.value) : null),\n              style: {\n                fontSize: '11px',\n                padding: '4px 6px',\n                border: '1px solid #ccc',\n                borderRadius: '4px',\n                width: '90px'\n              },\n              step: \"0.01\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 821,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 819,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              display: 'flex',\n              alignItems: 'center',\n              gap: '4px'\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              style: {\n                fontSize: '11px',\n                minWidth: '30px'\n              },\n              children: \"Max:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 836,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"number\",\n              value: maxPrice || '',\n              onChange: e => setMaxPrice(e.target.value ? parseFloat(e.target.value) : null),\n              style: {\n                fontSize: '11px',\n                padding: '4px 6px',\n                border: '1px solid #ccc',\n                borderRadius: '4px',\n                width: '90px'\n              },\n              step: \"0.01\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 837,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 835,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => {\n              setMinPrice(null);\n              setMaxPrice(null);\n            },\n            style: {\n              fontSize: '11px',\n              padding: '4px 8px',\n              backgroundColor: '#fff',\n              border: '1px solid #ccc',\n              borderRadius: '4px',\n              cursor: 'pointer'\n            },\n            children: \"Clear Range\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 851,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 818,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 814,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 781,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        position: 'relative'\n      },\n      children: /*#__PURE__*/_jsxDEV(\"svg\", {\n        ref: svgRef,\n        width: 800,\n        height: 400,\n        style: {\n          border: '1px solid #ccc'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 869,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 868,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 779,\n    columnNumber: 5\n  }, this);\n};\n_s(D3Chart, \"25mmWgujaSzDVWWkQqkeNisHzEU=\");\n_c = D3Chart;\nexport default D3Chart;\nvar _c;\n$RefreshReg$(_c, \"D3Chart\");","map":{"version":3,"names":["React","useEffect","useRef","useState","useMemo","d3","PriceRange","jsxDEV","_jsxDEV","priceDataCache","Map","findClosestElementBinarySearch","data","target","_data$right","_data$left","left","right","length","has","toString","get","mid","Math","floor","price0","set","closest","Infinity","nextClosest","closestElement","abs","scaleToInteger","a","precision","scaleFactor","pow","round","D3Chart","liquidityData","_s","svgRef","initialViewSet","setInitialViewSet","dragInProgress","setDragInProgress","defaultState","zoomLevel","panY","minPrice","maxPrice","chartState","setChartState","current","_data","value","currentTick","_findClosestElementBi","tick","brushExtent","setBrushExtent","extent","prev","setMinPrice","price","setMaxPrice","setZoomLevel","zoom","setPanY","pan","yScale","allPrices","map","d","priceExtent","priceRange","zoomedRange","centerPrice","scaleLinear","domain","range","svg","select","selectAll","remove","margin","top","bottom","width","height","g","append","attr","priceData","date","Date","time","xScale","scaleTime","line","x","y","curve","curveMonotoneX","i","currentPoint","nextPoint","isInRange","color","datum","liquidityWidth","liquidityYScale","currentPriceRange","currentZoomedRange","currentCenterPrice","visibleMinPrice","visibleMaxPrice","visibleLiquidityData","filter","maxVisibleLiquidity","max","activeLiquidity","liquidityXScale","bars","exit","transition","duration","style","enterBars","enter","merge","parseFloat","min","labelData","labels","enterLabels","text","toFixed","call","drag","on","event","newY","draggedPrice","invert","rangeSize","newMaxPrice","newMinPrice","dataMin","dataMax","newMaxY","newMinY","newPrice","currentMaxY","draggedMinPrice","draggedMaxPrice","currentMinY","handleWheel","preventDefault","stopPropagation","currentCenter","currentMin","currentMax","scrollSensitivity","rawScrollAmount","deltaY","scrollAmount","newPanY","halfZoomedRange","maxPanUp","maxPanDown","constrainedPanY","svgElement","addEventListener","passive","removeEventListener","_data2","liquidityPrices","sort","b","percentile20","percentile80","focusRange","desiredZoom","currentPrice","originalCenter","panOffset","brushRangeSize","defaultMinPrice","defaultMaxPrice","newDefaultState","handleZoomIn","handleZoomOut","handleResetZoom","children","marginBottom","background","padding","borderRadius","border","display","gap","alignItems","flexWrap","fontSize","fontWeight","fileName","_jsxFileName","lineNumber","columnNumber","onClick","textAlign","minWidth","type","onChange","e","step","backgroundColor","cursor","position","ref","_c","$RefreshReg$"],"sources":["/Users/phil.london/Projects/tradingview-chart-mvp/src/D3Chart.js"],"sourcesContent":["import React, { useEffect, useRef, useState, useMemo } from 'react';\nimport * as d3 from 'd3';\nimport PriceRange from './PriceRange';\n\n// Cache for price data lookups\nconst priceDataCache = new Map();\n\nfunction findClosestElementBinarySearch(data, target) {\n  let left = 0;\n  let right = data.length - 1;\n\n  if (!target) {\n    return null;\n  }\n\n  if (priceDataCache.has(target.toString())) {\n    return priceDataCache.get(target.toString());\n  }\n\n  while (left <= right) {\n    const mid = Math.floor((left + right) / 2);\n\n    if (data[mid].price0 === target) {\n      priceDataCache.set(target.toString(), data[mid]);\n      return data[mid];\n    } else if (data[mid].price0 < target) {\n      left = mid + 1;\n    } else {\n      right = mid - 1;\n    }\n  }\n\n  // After binary search, left and right are the closest bounds\n  const closest = data[right] ?? { price0: Infinity }; // Handle bounds\n  const nextClosest = data[left] ?? { price0: Infinity };\n\n  // Return the element with the closest `price0`\n  const closestElement =\n    Math.abs(closest.price0 - target) <= Math.abs(nextClosest.price0 - target) ? closest : nextClosest;\n\n  priceDataCache.set(target.toString(), closestElement);\n  return closestElement;\n}\n\nfunction scaleToInteger(a, precision = 18) {\n  const scaleFactor = Math.pow(10, precision);\n  return Math.round(a * scaleFactor);\n}\n\nconst D3Chart = ({ data, liquidityData }) => {\n  const svgRef = useRef();\n  const [initialViewSet, setInitialViewSet] = useState(false);\n  const [dragInProgress, setDragInProgress] = useState(false);\n  \n  // Default state object\n  const defaultState = useRef({\n    zoomLevel: 1,\n    panY: 0,\n    minPrice: null,\n    maxPrice: null\n  });\n  \n  // Main state object\n  const [chartState, setChartState] = useState({\n    zoomLevel: 1,\n    panY: 0,\n    minPrice: null,\n    maxPrice: null\n  });\n  \n  // Destructure for easier access\n  const { zoomLevel, panY, minPrice, maxPrice } = chartState;\n  \n  // Calculate current price from the last entry\n  const current = useMemo(() => {\n    return data && data.length > 0 ? data[data.length - 1]?.value : null;\n  }, [data]);\n  \n  // Calculate currentTick based on current price\n  const currentTick = useMemo(() => {\n    if (!current || !liquidityData) return null;\n    return findClosestElementBinarySearch(liquidityData, current)?.tick;\n  }, [current, liquidityData]);\n  \n  // Brush extent as [min, max] array\n  const brushExtent = useMemo(() => {\n    if (minPrice !== null && maxPrice !== null) {\n      return [minPrice, maxPrice];\n    }\n    return null;\n  }, [minPrice, maxPrice]);\n  \n  const setBrushExtent = (extent) => {\n    if (extent && extent.length === 2) {\n      setChartState(prev => ({\n        ...prev,\n        minPrice: extent[0],\n        maxPrice: extent[1]\n      }));\n    } else {\n      setChartState(prev => ({\n        ...prev,\n        minPrice: null,\n        maxPrice: null\n      }));\n    }\n  };\n  \n  // Helper functions for updating individual state properties\n  const setMinPrice = (price) => setChartState(prev => ({ ...prev, minPrice: price }));\n  const setMaxPrice = (price) => setChartState(prev => ({ ...prev, maxPrice: price }));\n  const setZoomLevel = (zoom) => setChartState(prev => ({ ...prev, zoomLevel: zoom }));\n  const setPanY = (pan) => setChartState(prev => ({ ...prev, panY: pan }));\n\n  // Calculate yScale outside useEffect so it's available for Brush component\n  const yScale = useMemo(() => {\n    if (!data || !liquidityData) return null;\n    \n    const allPrices = [\n      ...data.map(d => d.value),\n      ...liquidityData.map(d => d.price0)\n    ];\n    const priceExtent = d3.extent(allPrices);\n    \n    const priceRange = priceExtent[1] - priceExtent[0];\n    const zoomedRange = priceRange / zoomLevel;\n    const centerPrice = priceExtent[0] + priceRange * 0.5 + panY * priceRange;\n    \n    return d3.scaleLinear()\n      .domain([\n        centerPrice - zoomedRange / 2,\n        centerPrice + zoomedRange / 2\n      ])\n      .range([400 - 20 - 50, 0]); // [height, 0] for proper D3 coordinate system\n  }, [data, liquidityData, zoomLevel, panY]);\n\n  useEffect(() => {\n    if (!data || !liquidityData || !yScale) return;\n\n    const svg = d3.select(svgRef.current);\n    svg.selectAll(\"g\").remove(); // Only remove D3-created elements, not React elements\n\n    const margin = { top: 20, right: 120, bottom: 50, left: 80 };\n    const width = 800 - margin.left - margin.right;\n    const height = 400 - margin.top - margin.bottom;\n\n    const g = svg.append(\"g\")\n      .attr(\"transform\", `translate(${margin.left},${margin.top})`);\n\n    // Convert timestamps to dates for price data\n    const priceData = data.map(d => ({\n      date: new Date(d.time * 1000),\n      value: d.value\n    }));\n\n    // Unified price scale encompassing both price data and liquidity data\n    const allPrices = [\n      ...priceData.map(d => d.value),\n      ...liquidityData.map(d => d.price0)\n    ];\n    const priceExtent = d3.extent(allPrices);\n\n    // Scales for price line chart\n    const xScale = d3.scaleTime()\n      .domain(d3.extent(priceData, d => d.date))\n      .range([0, width]);\n\n    // Line generator for price\n    const line = d3.line()\n      .x(d => xScale(d.date))\n      .y(d => yScale(d.value))\n      .curve(d3.curveMonotoneX);\n\n    // Draw price line with conditional coloring\n    if (minPrice !== null && maxPrice !== null) {\n      // Draw segments with different colors based on price range\n      for (let i = 0; i < priceData.length - 1; i++) {\n        const currentPoint = priceData[i];\n        const nextPoint = priceData[i + 1];\n        \n        // Check if current point is within range\n        const isInRange = currentPoint.value >= minPrice && currentPoint.value <= maxPrice;\n        const color = isInRange ? \"#d63384\" : \"#888888\"; // Dark pink or grey\n        \n        // Draw line segment between current and next point\n        g.append(\"path\")\n          .datum([currentPoint, nextPoint])\n          .attr(\"fill\", \"none\")\n          .attr(\"stroke\", color)\n          .attr(\"stroke-width\", 2)\n          .attr(\"d\", line)\n          .attr(\"class\", \"price-segment\");\n      }\n    } else {\n      // Draw single blue line when no range is selected\n      g.append(\"path\")\n        .datum(priceData)\n        .attr(\"fill\", \"none\")\n        .attr(\"stroke\", \"#2196F3\")\n        .attr(\"stroke-width\", 2)\n        .attr(\"d\", line)\n        .attr(\"class\", \"price-line\");\n    }\n\n    // Remove X and left Y axes completely\n\n    // Right side liquidity chart - inspired by Uniswap's approach\n    const liquidityWidth = margin.right - 60; // Make room for 4-character price labels\n    \n    // Use the same unified y scale for liquidity positioning\n    const liquidityYScale = yScale;\n\n    // Calculate current visible price range for filtering liquidity data\n    const currentPriceRange = priceExtent[1] - priceExtent[0];\n    const currentZoomedRange = currentPriceRange / zoomLevel;\n    const currentCenterPrice = priceExtent[0] + currentPriceRange * 0.5 + panY * currentPriceRange;\n    const visibleMinPrice = currentCenterPrice - currentZoomedRange / 2;\n    const visibleMaxPrice = currentCenterPrice + currentZoomedRange / 2;\n\n    // Filter liquidity data to only entries within visible price range\n    const visibleLiquidityData = liquidityData.filter(d => \n      d.price0 >= visibleMinPrice && d.price0 <= visibleMaxPrice\n    );\n\n    // X scale for liquidity amounts - scale based only on visible entries\n    const maxVisibleLiquidity = visibleLiquidityData.length > 0 \n      ? d3.max(visibleLiquidityData, d => d.activeLiquidity)\n      : d3.max(liquidityData, d => d.activeLiquidity); // Fallback if no visible data\n\n    const liquidityXScale = d3.scaleLinear()\n      .domain([0, maxVisibleLiquidity])\n      .range([0, liquidityWidth]);\n\n    // Draw very thin grey horizontal liquidity bars using data join for better performance\n    const bars = g.selectAll(\".liquidity-bar\")\n      .data(liquidityData, d => d.price0); // Use price as key for consistent updates\n    \n    // Remove bars that are no longer needed\n    bars.exit()\n      .transition()\n      .duration(150)\n      .style(\"opacity\", 0)\n      .remove();\n    \n    // Add new bars\n    const enterBars = bars.enter()\n      .append(\"rect\")\n      .attr(\"class\", \"liquidity-bar\")\n      .attr(\"height\", 1)\n      .attr(\"opacity\", 0.7)\n      .attr(\"x\", d => width + 10 + liquidityWidth - liquidityXScale(d.activeLiquidity))\n      .attr(\"y\", d => liquidityYScale(d.price0) - 0.5)\n      .attr(\"width\", d => liquidityXScale(d.activeLiquidity));\n    \n    // Update existing bars with smooth transitions and conditional coloring\n    bars.merge(enterBars)\n      .transition()\n      .duration(100)\n      .attr(\"x\", d => width + 10 + liquidityWidth - liquidityXScale(d.activeLiquidity))\n      .attr(\"y\", d => liquidityYScale(d.price0) - 0.5)\n      .attr(\"width\", d => liquidityXScale(d.activeLiquidity))\n      .attr(\"fill\", d => {\n        // Check if bar is within the price range - ensure proper number comparison\n        const price = parseFloat(d.price0);\n        const min = parseFloat(minPrice);\n        const max = parseFloat(maxPrice);\n        \n        if (minPrice !== null && maxPrice !== null && \n            price >= min && price <= max) {\n          return \"#d63384\"; // Dark pink for bars within range\n        }\n        return \"#888888\"; // Default grey\n      });\n\n    // Remove right Y-axis - keep only the price labels\n\n    // Add price labels in the reserved space to the right using data join\n    const labelData = liquidityData.filter((d, i) => i % 10 === 0); // Show every 10th label to avoid clutter\n    const labels = g.selectAll(\".liquidity-price-label\")\n      .data(labelData, d => d.price0); // Use price as key\n    \n    // Remove labels that are no longer needed\n    labels.exit()\n      .transition()\n      .duration(150)\n      .style(\"opacity\", 0)\n      .remove();\n    \n    // Add new labels\n    const enterLabels = labels.enter()\n      .append(\"text\")\n      .attr(\"class\", \"liquidity-price-label\")\n      .attr(\"font-size\", \"8px\")\n      .attr(\"fill\", \"#666\")\n      .attr(\"text-anchor\", \"start\")\n      .attr(\"dy\", \"0.35em\")\n      .attr(\"opacity\", 1)\n      .attr(\"x\", width + liquidityWidth + 15) // Position in reserved label space\n      .attr(\"y\", d => liquidityYScale(d.price0))\n      .text(d => d.price0.toFixed(0));\n    \n    // Update existing labels with smooth transitions\n    labels.merge(enterLabels)\n      .transition()\n      .duration(100)\n      .attr(\"x\", width + liquidityWidth + 15)\n      .attr(\"y\", d => liquidityYScale(d.price0));\n\n    // Draw price range visualization directly in the main chart\n    if (minPrice !== null && maxPrice !== null) {\n      // Remove existing range elements\n      g.selectAll(\".price-range-element\").remove();\n      \n      // Draw transparent pink background between min and max - extend to cover full chart area\n      g.append('rect')\n        .attr('class', 'price-range-element price-range-bg')\n        .attr('x', -80) // Extend left to cover the margin area\n        .attr('y', yScale(maxPrice))\n        .attr('width', 800) // Cover the entire SVG width\n        .attr('height', yScale(minPrice) - yScale(maxPrice))\n        .attr('fill', '#ff69b4')\n        .attr('fill-opacity', 0.15)\n        .attr('cursor', 'move')\n        .call(d3.drag()\n          .on('start', function() {\n            setDragInProgress(true);\n          })\n          .on('drag', function(event) {\n            const newY = Math.max(0, Math.min(height, event.y));\n            const draggedPrice = yScale.invert(newY);\n            const rangeSize = maxPrice - minPrice;\n            \n            // Calculate new min/max based on dragged center position\n            const newMaxPrice = draggedPrice + rangeSize / 2;\n            const newMinPrice = draggedPrice - rangeSize / 2;\n            \n            // Get data bounds to prevent dragging outside chart\n            const allPrices = [\n              ...data.map(d => d.value),\n              ...liquidityData.map(d => d.price0)\n            ];\n            const dataMin = Math.min(...allPrices);\n            const dataMax = Math.max(...allPrices);\n            \n            // Only update if range stays within data bounds\n            if (newMinPrice >= dataMin && newMaxPrice <= dataMax) {\n              // Update background position\n              const newMaxY = yScale(newMaxPrice);\n              const newMinY = yScale(newMinPrice);\n              \n              d3.select(this)\n                .attr('y', newMaxY)\n                .attr('height', newMinY - newMaxY);\n              \n              // Update min line\n              g.select('.min-line')\n                .attr('y1', newMinY)\n                .attr('y2', newMinY);\n                \n              // Update max line\n              g.select('.max-line')\n                .attr('y1', newMaxY)\n                .attr('y2', newMaxY);\n                \n              // Update labels\n              g.select('.min-label')\n                .attr('y', newMinY - 5)\n                .text(`Min: ${newMinPrice.toFixed(0)}`);\n                \n              g.select('.max-label')\n                .attr('y', newMaxY + 15)\n                .text(`Max: ${newMaxPrice.toFixed(0)}`);\n                \n              // Update liquidity bar colors\n              g.selectAll('.liquidity-bar')\n                .attr('fill', d => {\n                  const price = parseFloat(d.price0);\n                  if (price >= newMinPrice && price <= newMaxPrice) {\n                    return \"#d63384\";\n                  }\n                  return \"#888888\";\n                });\n                \n              // Update price line segment colors\n              g.selectAll('.price-segment')\n                .attr('stroke', function() {\n                  const datum = d3.select(this).datum();\n                  if (datum && datum.length > 0) {\n                    const value = datum[0].value;\n                    return (value >= newMinPrice && value <= newMaxPrice) ? \"#d63384\" : \"#888888\";\n                  }\n                  return \"#888888\";\n                });\n            }\n          })\n          .on('end', function(event) {\n            const newY = Math.max(0, Math.min(height, event.y));\n            const draggedPrice = yScale.invert(newY);\n            const rangeSize = maxPrice - minPrice;\n            \n            // Calculate new min/max based on dragged center position\n            const newMaxPrice = draggedPrice + rangeSize / 2;\n            const newMinPrice = draggedPrice - rangeSize / 2;\n            \n            // Get data bounds\n            const allPrices = [\n              ...data.map(d => d.value),\n              ...liquidityData.map(d => d.price0)\n            ];\n            const dataMin = Math.min(...allPrices);\n            const dataMax = Math.max(...allPrices);\n            \n            // Only update state if range stays within data bounds\n            if (newMinPrice >= dataMin && newMaxPrice <= dataMax) {\n              setMinPrice(newMinPrice);\n              setMaxPrice(newMaxPrice);\n            }\n            \n            setDragInProgress(false);\n          })\n        );\n\n      // Draw min price line (solid) with drag behavior\n      g.append('line')\n        .attr('class', 'price-range-element min-line')\n        .attr('x1', -80) // Start from left margin\n        .attr('x2', 720) // Extend to right edge (800 - 80 = 720)\n        .attr('y1', yScale(minPrice))\n        .attr('y2', yScale(minPrice))\n        .attr('stroke', '#ff6b6b')\n        .attr('stroke-width', 4)\n        .attr('opacity', 0.9)\n        .attr('cursor', 'ns-resize')\n        .call(d3.drag()\n          .on('start', function() {\n            setDragInProgress(true);\n          })\n          .on('drag', function(event) {\n            const newY = Math.max(0, Math.min(height, event.y));\n            const newPrice = yScale.invert(newY);\n            \n            // Update visual position immediately\n            d3.select(this)\n              .attr('y1', newY)\n              .attr('y2', newY);\n            \n            // Determine which line represents min and max during drag\n            const currentMaxY = yScale(maxPrice);\n            let draggedMinPrice = newPrice;\n            let draggedMaxPrice = maxPrice;\n            \n            // Handle visual swapping if lines cross\n            if (newY < currentMaxY) {\n              // Min line dragged above max line - swap visually\n              draggedMinPrice = maxPrice;\n              draggedMaxPrice = newPrice;\n              \n              // Update max line color to min color and vice versa\n              g.select('.max-line')\n                .attr('stroke', '#ff6b6b'); // Min color\n              d3.select(this)\n                .attr('stroke', '#4ecdc4'); // Max color\n            } else {\n              // Lines in normal order - restore original colors\n              g.select('.max-line')\n                .attr('stroke', '#4ecdc4'); // Max color\n              d3.select(this)\n                .attr('stroke', '#ff6b6b'); // Min color\n            }\n            \n            // Update background\n            g.select('.price-range-bg')\n              .attr('y', yScale(draggedMaxPrice))\n              .attr('height', yScale(draggedMinPrice) - yScale(draggedMaxPrice));\n            \n            // Update labels\n            g.select('.min-label')\n              .attr('y', yScale(draggedMinPrice) - 5)\n              .text(`Min: ${draggedMinPrice.toFixed(0)}`);\n            g.select('.max-label')\n              .attr('y', yScale(draggedMaxPrice) + 15)\n              .text(`Max: ${draggedMaxPrice.toFixed(0)}`);\n            \n            // Update liquidity bar colors\n            g.selectAll('.liquidity-bar')\n              .attr('fill', d => {\n                const price = parseFloat(d.price0);\n                if (price >= draggedMinPrice && price <= draggedMaxPrice) {\n                  return \"#d63384\";\n                }\n                return \"#888888\";\n              });\n            \n            // Update price line segment colors\n            g.selectAll('.price-segment')\n              .attr('stroke', function() {\n                const datum = d3.select(this).datum();\n                if (datum && datum.length > 0) {\n                  const value = datum[0].value;\n                  return (value >= draggedMinPrice && value <= draggedMaxPrice) ? \"#d63384\" : \"#888888\";\n                }\n                return \"#888888\";\n              });\n          })\n          .on('end', function(event) {\n            const newY = Math.max(0, Math.min(height, event.y));\n            const newPrice = yScale.invert(newY);\n            \n            // Handle final state update with proper min/max ordering\n            if (newPrice > maxPrice) {\n              // Min dragged above max - swap them in state\n              setMinPrice(maxPrice);\n              setMaxPrice(newPrice);\n            } else {\n              // Normal case - just update min\n              setMinPrice(newPrice);\n            }\n            \n            setDragInProgress(false);\n          })\n        );\n\n      // Draw max price line (solid) with drag behavior\n      g.append('line')\n        .attr('class', 'price-range-element max-line')\n        .attr('x1', -80) // Start from left margin\n        .attr('x2', 720) // Extend to right edge (800 - 80 = 720)\n        .attr('y1', yScale(maxPrice))\n        .attr('y2', yScale(maxPrice))\n        .attr('stroke', '#4ecdc4')\n        .attr('stroke-width', 4)\n        .attr('opacity', 0.9)\n        .attr('cursor', 'ns-resize')\n        .call(d3.drag()\n          .on('start', function() {\n            setDragInProgress(true);\n          })\n          .on('drag', function(event) {\n            const newY = Math.max(0, Math.min(height, event.y));\n            const newPrice = yScale.invert(newY);\n            \n            // Update visual position immediately\n            d3.select(this)\n              .attr('y1', newY)\n              .attr('y2', newY);\n            \n            // Determine which line represents min and max during drag\n            const currentMinY = yScale(minPrice);\n            let draggedMinPrice = minPrice;\n            let draggedMaxPrice = newPrice;\n            \n            // Handle visual swapping if lines cross\n            if (newY > currentMinY) {\n              // Max line dragged below min line - swap visually\n              draggedMinPrice = newPrice;\n              draggedMaxPrice = minPrice;\n              \n              // Update min line color to max color and vice versa\n              g.select('.min-line')\n                .attr('stroke', '#4ecdc4'); // Max color\n              d3.select(this)\n                .attr('stroke', '#ff6b6b'); // Min color\n            } else {\n              // Lines in normal order - restore original colors\n              g.select('.min-line')\n                .attr('stroke', '#ff6b6b'); // Min color\n              d3.select(this)\n                .attr('stroke', '#4ecdc4'); // Max color\n            }\n            \n            // Update background\n            g.select('.price-range-bg')\n              .attr('y', yScale(draggedMaxPrice))\n              .attr('height', yScale(draggedMinPrice) - yScale(draggedMaxPrice));\n            \n            // Update labels\n            g.select('.min-label')\n              .attr('y', yScale(draggedMinPrice) - 5)\n              .text(`Min: ${draggedMinPrice.toFixed(0)}`);\n            g.select('.max-label')\n              .attr('y', yScale(draggedMaxPrice) + 15)\n              .text(`Max: ${draggedMaxPrice.toFixed(0)}`);\n            \n            // Update liquidity bar colors\n            g.selectAll('.liquidity-bar')\n              .attr('fill', d => {\n                const price = parseFloat(d.price0);\n                if (price >= draggedMinPrice && price <= draggedMaxPrice) {\n                  return \"#d63384\";\n                }\n                return \"#888888\";\n              });\n            \n            // Update price line segment colors\n            g.selectAll('.price-segment')\n              .attr('stroke', function() {\n                const datum = d3.select(this).datum();\n                if (datum && datum.length > 0) {\n                  const value = datum[0].value;\n                  return (value >= draggedMinPrice && value <= draggedMaxPrice) ? \"#d63384\" : \"#888888\";\n                }\n                return \"#888888\";\n              });\n          })\n          .on('end', function(event) {\n            const newY = Math.max(0, Math.min(height, event.y));\n            const newPrice = yScale.invert(newY);\n            \n            // Handle final state update with proper min/max ordering\n            if (newPrice < minPrice) {\n              // Max dragged below min - swap them in state\n              setMaxPrice(minPrice);\n              setMinPrice(newPrice);\n            } else {\n              // Normal case - just update max\n              setMaxPrice(newPrice);\n            }\n            \n            setDragInProgress(false);\n          })\n        );\n        \n      // Add min price label\n      g.append('text')\n        .attr('class', 'price-range-element min-label')\n        .attr('x', 5)\n        .attr('y', yScale(minPrice) - 5)\n        .attr('font-size', '10px')\n        .attr('fill', '#ff6b6b')\n        .attr('font-weight', 'bold')\n        .text(`Min: ${minPrice.toFixed(0)}`);\n        \n      // Add max price label\n      g.append('text')\n        .attr('class', 'price-range-element max-label')\n        .attr('x', 5)\n        .attr('y', yScale(maxPrice) + 15)\n        .attr('font-size', '10px')\n        .attr('fill', '#4ecdc4')\n        .attr('font-weight', 'bold')\n        .text(`Max: ${maxPrice.toFixed(0)}`);\n    }\n\n    // Draw current price line (dotted) if current price exists\n    if (current !== null) {\n      // Remove existing current price line\n      g.selectAll('.current-price-line').remove();\n      g.selectAll('.current-price-label').remove();\n      \n      // Draw dotted line across the entire chart for current price\n      g.append('line')\n        .attr('class', 'current-price-line')\n        .attr('x1', -80) // Start from left margin\n        .attr('x2', 720) // Extend to right edge (800 - 80 = 720)\n        .attr('y1', yScale(current))\n        .attr('y2', yScale(current))\n        .attr('stroke', '#666666') // Grey color\n        .attr('stroke-width', 2)\n        .attr('stroke-dasharray', '5,5') // Dotted line pattern\n        .attr('opacity', 0.8);\n        \n      // Add current price label on the left like min/max\n      g.append('text')\n        .attr('class', 'current-price-label')\n        .attr('x', 5) // Position on the left side like min/max\n        .attr('y', yScale(current) - 5)\n        .attr('font-size', '10px')\n        .attr('fill', '#666666') // Grey color\n        .attr('font-weight', 'bold')\n        .text(`Current: ${current.toFixed(0)}`);\n    }\n\n\n    // Setup wheel event handler\n    const handleWheel = (event) => {\n      event.preventDefault();\n      event.stopPropagation();\n      \n      // Calculate current view bounds\n      const priceRange = priceExtent[1] - priceExtent[0];\n      const zoomedRange = priceRange / zoomLevel;\n      const currentCenter = priceExtent[0] + priceRange * 0.5 + panY * priceRange;\n      const currentMin = currentCenter - zoomedRange / 2;\n      const currentMax = currentCenter + zoomedRange / 2;\n      \n      // Natural scroll sensitivity based on current view range\n      const scrollSensitivity = zoomedRange / 600; // Faster scrolling for larger ranges\n      const rawScrollAmount = event.deltaY * scrollSensitivity;\n      \n      // Apply scroll (invert deltaY for natural direction)\n      const scrollAmount = rawScrollAmount / priceRange; // Normalize to pan range\n      \n      setChartState(prev => {\n        const newPanY = prev.panY - scrollAmount;\n        \n        // Dynamic bounds based on data and zoom level\n        const dataMin = Math.min(...allPrices);\n        const dataMax = Math.max(...allPrices);\n        const halfZoomedRange = zoomedRange / 2;\n        \n        // Calculate max pan bounds to keep view within data\n        const maxPanUp = (dataMax - halfZoomedRange - (priceExtent[0] + priceRange * 0.5)) / priceRange;\n        const maxPanDown = (dataMin + halfZoomedRange - (priceExtent[0] + priceRange * 0.5)) / priceRange;\n        \n        // Constrain to bounds\n        const constrainedPanY = Math.max(maxPanDown, Math.min(maxPanUp, newPanY));\n        \n        return { ...prev, panY: constrainedPanY };\n      });\n    };\n\n    // Add wheel event listener\n    const svgElement = svgRef.current;\n    if (svgElement) {\n      svgElement.addEventListener('wheel', handleWheel, { passive: false });\n      return () => svgElement.removeEventListener('wheel', handleWheel);\n    }\n\n  }, [data, liquidityData, zoomLevel, panY, yScale, minPrice, maxPrice, current, currentTick]);\n\n  // Set reasonable initial view on first load\n  useEffect(() => {\n    if (!initialViewSet && data && liquidityData && liquidityData.length > 0) {\n      const allPrices = [\n        ...data.map(d => d.value),\n        ...liquidityData.map(d => d.price0)\n      ];\n      const priceExtent = d3.extent(allPrices);\n      const priceRange = priceExtent[1] - priceExtent[0];\n      \n      // Filter out extreme outliers for initial view - focus on middle 20% of liquidity\n      const liquidityPrices = liquidityData.map(d => d.price0).sort((a, b) => a - b);\n      const percentile20 = liquidityPrices[Math.floor(liquidityPrices.length * 0.2)];\n      const percentile80 = liquidityPrices[Math.floor(liquidityPrices.length * 0.8)];\n      \n      // Set initial zoom to focus on the 20-80% range of liquidity with tighter view\n      const focusRange = percentile80 - percentile20;\n      const desiredZoom = Math.min(priceRange / (focusRange * 1), 25); // Show ~1x the focus range, max 25x zoom\n      \n      // Center the view on the current price (last data point)\n      const currentPrice = data[data.length - 1]?.value;\n      const originalCenter = priceExtent[0] + priceRange * 0.5;\n      const panOffset = (currentPrice - originalCenter) / priceRange;\n      \n      // Set default brush range - use a symmetrical range around current price\n      // Use 10% of the total price range for the brush range (tighter)\n      const brushRangeSize = priceRange * 0.1;\n      const defaultMinPrice = currentPrice - brushRangeSize / 2;\n      const defaultMaxPrice = currentPrice + brushRangeSize / 2;\n      \n      // Update both current state and default state\n      const newDefaultState = {\n        zoomLevel: desiredZoom,\n        panY: panOffset,\n        minPrice: defaultMinPrice,\n        maxPrice: defaultMaxPrice\n      };\n      \n      defaultState.current = newDefaultState;\n      setChartState(newDefaultState);\n      \n      setInitialViewSet(true);\n    }\n  }, [data, liquidityData, initialViewSet]);\n\n  const handleZoomIn = () => {\n    setChartState(prev => ({ ...prev, zoomLevel: Math.min(prev.zoomLevel * 1.3, 50) }));\n  };\n\n  const handleZoomOut = () => {\n    setChartState(prev => ({ ...prev, zoomLevel: Math.max(prev.zoomLevel / 1.3, 0.1) }));\n  };\n\n  const handleResetZoom = () => {\n    setChartState(defaultState.current);\n  };\n\n  return (\n    <div>\n      {/* Controls Panel - Outside Chart */}\n      <div style={{ \n        marginBottom: '10px',\n        background: '#f9f9f9',\n        padding: '12px',\n        borderRadius: '4px',\n        border: '1px solid #ddd',\n        display: 'flex',\n        gap: '20px',\n        alignItems: 'flex-start',\n        flexWrap: 'wrap'\n      }}>\n        {/* Zoom Controls */}\n        <div>\n          <div style={{ marginBottom: '4px', fontSize: '12px', fontWeight: 'bold' }}>\n            Zoom: {zoomLevel.toFixed(1)}x\n          </div>\n          <div style={{ display: 'flex', gap: '4px', marginBottom: '4px' }}>\n            <button onClick={handleZoomIn} style={{ fontSize: '12px', padding: '4px 8px' }}>\n              Zoom In (+)\n            </button>\n            <button onClick={handleZoomOut} style={{ fontSize: '12px', padding: '4px 8px' }}>\n              Zoom Out (-)\n            </button>\n            <button onClick={handleResetZoom} style={{ fontSize: '12px', padding: '4px 8px' }}>\n              Reset\n            </button>\n          </div>\n          <div style={{ fontSize: '10px', color: '#666', textAlign: 'center' }}>\n            Scroll to pan\n          </div>\n        </div>\n\n        {/* Price Range Controls */}\n        <div>\n          <div style={{ marginBottom: '4px', fontSize: '12px', fontWeight: 'bold' }}>\n            Price Range\n          </div>\n          <div style={{ display: 'flex', gap: '8px', alignItems: 'center', flexWrap: 'wrap' }}>\n            <div style={{ display: 'flex', alignItems: 'center', gap: '4px' }}>\n              <label style={{ fontSize: '11px', minWidth: '30px' }}>Min:</label>\n              <input\n                type=\"number\"\n                value={minPrice || ''}\n                onChange={(e) => setMinPrice(e.target.value ? parseFloat(e.target.value) : null)}\n                style={{ \n                  fontSize: '11px', \n                  padding: '4px 6px', \n                  border: '1px solid #ccc',\n                  borderRadius: '4px',\n                  width: '90px'\n                }}\n                step=\"0.01\"\n              />\n            </div>\n            <div style={{ display: 'flex', alignItems: 'center', gap: '4px' }}>\n              <label style={{ fontSize: '11px', minWidth: '30px' }}>Max:</label>\n              <input\n                type=\"number\"\n                value={maxPrice || ''}\n                onChange={(e) => setMaxPrice(e.target.value ? parseFloat(e.target.value) : null)}\n                style={{ \n                  fontSize: '11px', \n                  padding: '4px 6px', \n                  border: '1px solid #ccc',\n                  borderRadius: '4px',\n                  width: '90px'\n                }}\n                step=\"0.01\"\n              />\n            </div>\n            <button \n              onClick={() => { setMinPrice(null); setMaxPrice(null); }}\n              style={{ \n                fontSize: '11px', \n                padding: '4px 8px', \n                backgroundColor: '#fff',\n                border: '1px solid #ccc',\n                borderRadius: '4px',\n                cursor: 'pointer'\n              }}\n            >\n              Clear Range\n            </button>\n          </div>\n        </div>\n      </div>\n\n      <div style={{ position: 'relative' }}>\n        <svg\n        ref={svgRef}\n        width={800}\n        height={400}\n        style={{ border: '1px solid #ccc' }}\n        >\n        </svg>\n        \n      </div>\n    </div>\n  );\n};\n\nexport default D3Chart;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}